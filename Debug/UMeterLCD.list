
UMeterLCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e48  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08002f00  08002f00  00012f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f94  08002f94  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08002f94  08002f94  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f94  08002f94  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f94  08002f94  00012f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f98  08002f98  00012f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002f9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000010  08002fac  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000088  08002fac  00020088  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      0000004c  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009864  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ca1  00000000  00000000  000298e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b28  00000000  00000000  0002b590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000085e  00000000  00000000  0002c0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014153  00000000  00000000  0002c916  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b33b  00000000  00000000  00040a69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000809c1  00000000  00000000  0004bda4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000025a0  00000000  00000000  000cc768  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000013f  00000000  00000000  000ced08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 000000b0  00000000  00000000  000cee47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__udivsi3>:
 80000b8:	2200      	movs	r2, #0
 80000ba:	0843      	lsrs	r3, r0, #1
 80000bc:	428b      	cmp	r3, r1
 80000be:	d374      	bcc.n	80001aa <__udivsi3+0xf2>
 80000c0:	0903      	lsrs	r3, r0, #4
 80000c2:	428b      	cmp	r3, r1
 80000c4:	d35f      	bcc.n	8000186 <__udivsi3+0xce>
 80000c6:	0a03      	lsrs	r3, r0, #8
 80000c8:	428b      	cmp	r3, r1
 80000ca:	d344      	bcc.n	8000156 <__udivsi3+0x9e>
 80000cc:	0b03      	lsrs	r3, r0, #12
 80000ce:	428b      	cmp	r3, r1
 80000d0:	d328      	bcc.n	8000124 <__udivsi3+0x6c>
 80000d2:	0c03      	lsrs	r3, r0, #16
 80000d4:	428b      	cmp	r3, r1
 80000d6:	d30d      	bcc.n	80000f4 <__udivsi3+0x3c>
 80000d8:	22ff      	movs	r2, #255	; 0xff
 80000da:	0209      	lsls	r1, r1, #8
 80000dc:	ba12      	rev	r2, r2
 80000de:	0c03      	lsrs	r3, r0, #16
 80000e0:	428b      	cmp	r3, r1
 80000e2:	d302      	bcc.n	80000ea <__udivsi3+0x32>
 80000e4:	1212      	asrs	r2, r2, #8
 80000e6:	0209      	lsls	r1, r1, #8
 80000e8:	d065      	beq.n	80001b6 <__udivsi3+0xfe>
 80000ea:	0b03      	lsrs	r3, r0, #12
 80000ec:	428b      	cmp	r3, r1
 80000ee:	d319      	bcc.n	8000124 <__udivsi3+0x6c>
 80000f0:	e000      	b.n	80000f4 <__udivsi3+0x3c>
 80000f2:	0a09      	lsrs	r1, r1, #8
 80000f4:	0bc3      	lsrs	r3, r0, #15
 80000f6:	428b      	cmp	r3, r1
 80000f8:	d301      	bcc.n	80000fe <__udivsi3+0x46>
 80000fa:	03cb      	lsls	r3, r1, #15
 80000fc:	1ac0      	subs	r0, r0, r3
 80000fe:	4152      	adcs	r2, r2
 8000100:	0b83      	lsrs	r3, r0, #14
 8000102:	428b      	cmp	r3, r1
 8000104:	d301      	bcc.n	800010a <__udivsi3+0x52>
 8000106:	038b      	lsls	r3, r1, #14
 8000108:	1ac0      	subs	r0, r0, r3
 800010a:	4152      	adcs	r2, r2
 800010c:	0b43      	lsrs	r3, r0, #13
 800010e:	428b      	cmp	r3, r1
 8000110:	d301      	bcc.n	8000116 <__udivsi3+0x5e>
 8000112:	034b      	lsls	r3, r1, #13
 8000114:	1ac0      	subs	r0, r0, r3
 8000116:	4152      	adcs	r2, r2
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d301      	bcc.n	8000122 <__udivsi3+0x6a>
 800011e:	030b      	lsls	r3, r1, #12
 8000120:	1ac0      	subs	r0, r0, r3
 8000122:	4152      	adcs	r2, r2
 8000124:	0ac3      	lsrs	r3, r0, #11
 8000126:	428b      	cmp	r3, r1
 8000128:	d301      	bcc.n	800012e <__udivsi3+0x76>
 800012a:	02cb      	lsls	r3, r1, #11
 800012c:	1ac0      	subs	r0, r0, r3
 800012e:	4152      	adcs	r2, r2
 8000130:	0a83      	lsrs	r3, r0, #10
 8000132:	428b      	cmp	r3, r1
 8000134:	d301      	bcc.n	800013a <__udivsi3+0x82>
 8000136:	028b      	lsls	r3, r1, #10
 8000138:	1ac0      	subs	r0, r0, r3
 800013a:	4152      	adcs	r2, r2
 800013c:	0a43      	lsrs	r3, r0, #9
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x8e>
 8000142:	024b      	lsls	r3, r1, #9
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0a03      	lsrs	r3, r0, #8
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x9a>
 800014e:	020b      	lsls	r3, r1, #8
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	d2cd      	bcs.n	80000f2 <__udivsi3+0x3a>
 8000156:	09c3      	lsrs	r3, r0, #7
 8000158:	428b      	cmp	r3, r1
 800015a:	d301      	bcc.n	8000160 <__udivsi3+0xa8>
 800015c:	01cb      	lsls	r3, r1, #7
 800015e:	1ac0      	subs	r0, r0, r3
 8000160:	4152      	adcs	r2, r2
 8000162:	0983      	lsrs	r3, r0, #6
 8000164:	428b      	cmp	r3, r1
 8000166:	d301      	bcc.n	800016c <__udivsi3+0xb4>
 8000168:	018b      	lsls	r3, r1, #6
 800016a:	1ac0      	subs	r0, r0, r3
 800016c:	4152      	adcs	r2, r2
 800016e:	0943      	lsrs	r3, r0, #5
 8000170:	428b      	cmp	r3, r1
 8000172:	d301      	bcc.n	8000178 <__udivsi3+0xc0>
 8000174:	014b      	lsls	r3, r1, #5
 8000176:	1ac0      	subs	r0, r0, r3
 8000178:	4152      	adcs	r2, r2
 800017a:	0903      	lsrs	r3, r0, #4
 800017c:	428b      	cmp	r3, r1
 800017e:	d301      	bcc.n	8000184 <__udivsi3+0xcc>
 8000180:	010b      	lsls	r3, r1, #4
 8000182:	1ac0      	subs	r0, r0, r3
 8000184:	4152      	adcs	r2, r2
 8000186:	08c3      	lsrs	r3, r0, #3
 8000188:	428b      	cmp	r3, r1
 800018a:	d301      	bcc.n	8000190 <__udivsi3+0xd8>
 800018c:	00cb      	lsls	r3, r1, #3
 800018e:	1ac0      	subs	r0, r0, r3
 8000190:	4152      	adcs	r2, r2
 8000192:	0883      	lsrs	r3, r0, #2
 8000194:	428b      	cmp	r3, r1
 8000196:	d301      	bcc.n	800019c <__udivsi3+0xe4>
 8000198:	008b      	lsls	r3, r1, #2
 800019a:	1ac0      	subs	r0, r0, r3
 800019c:	4152      	adcs	r2, r2
 800019e:	0843      	lsrs	r3, r0, #1
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xf0>
 80001a4:	004b      	lsls	r3, r1, #1
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	1a41      	subs	r1, r0, r1
 80001ac:	d200      	bcs.n	80001b0 <__udivsi3+0xf8>
 80001ae:	4601      	mov	r1, r0
 80001b0:	4152      	adcs	r2, r2
 80001b2:	4610      	mov	r0, r2
 80001b4:	4770      	bx	lr
 80001b6:	e7ff      	b.n	80001b8 <__udivsi3+0x100>
 80001b8:	b501      	push	{r0, lr}
 80001ba:	2000      	movs	r0, #0
 80001bc:	f000 f806 	bl	80001cc <__aeabi_idiv0>
 80001c0:	bd02      	pop	{r1, pc}
 80001c2:	46c0      	nop			; (mov r8, r8)

080001c4 <__aeabi_uidivmod>:
 80001c4:	2900      	cmp	r1, #0
 80001c6:	d0f7      	beq.n	80001b8 <__udivsi3+0x100>
 80001c8:	e776      	b.n	80000b8 <__udivsi3>
 80001ca:	4770      	bx	lr

080001cc <__aeabi_idiv0>:
 80001cc:	4770      	bx	lr
 80001ce:	46c0      	nop			; (mov r8, r8)

080001d0 <deregister_tm_clones>:
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <deregister_tm_clones+0x14>)
 80001d2:	4b05      	ldr	r3, [pc, #20]	; (80001e8 <deregister_tm_clones+0x18>)
 80001d4:	b510      	push	{r4, lr}
 80001d6:	4283      	cmp	r3, r0
 80001d8:	d003      	beq.n	80001e2 <deregister_tm_clones+0x12>
 80001da:	4b04      	ldr	r3, [pc, #16]	; (80001ec <deregister_tm_clones+0x1c>)
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d000      	beq.n	80001e2 <deregister_tm_clones+0x12>
 80001e0:	4798      	blx	r3
 80001e2:	bd10      	pop	{r4, pc}
 80001e4:	20000010 	.word	0x20000010
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000

080001f0 <register_tm_clones>:
 80001f0:	4806      	ldr	r0, [pc, #24]	; (800020c <register_tm_clones+0x1c>)
 80001f2:	4907      	ldr	r1, [pc, #28]	; (8000210 <register_tm_clones+0x20>)
 80001f4:	1a09      	subs	r1, r1, r0
 80001f6:	108b      	asrs	r3, r1, #2
 80001f8:	0fc9      	lsrs	r1, r1, #31
 80001fa:	18c9      	adds	r1, r1, r3
 80001fc:	b510      	push	{r4, lr}
 80001fe:	1049      	asrs	r1, r1, #1
 8000200:	d003      	beq.n	800020a <register_tm_clones+0x1a>
 8000202:	4b04      	ldr	r3, [pc, #16]	; (8000214 <register_tm_clones+0x24>)
 8000204:	2b00      	cmp	r3, #0
 8000206:	d000      	beq.n	800020a <register_tm_clones+0x1a>
 8000208:	4798      	blx	r3
 800020a:	bd10      	pop	{r4, pc}
 800020c:	20000010 	.word	0x20000010
 8000210:	20000010 	.word	0x20000010
 8000214:	00000000 	.word	0x00000000

08000218 <__do_global_dtors_aux>:
 8000218:	b510      	push	{r4, lr}
 800021a:	4c07      	ldr	r4, [pc, #28]	; (8000238 <__do_global_dtors_aux+0x20>)
 800021c:	7823      	ldrb	r3, [r4, #0]
 800021e:	2b00      	cmp	r3, #0
 8000220:	d109      	bne.n	8000236 <__do_global_dtors_aux+0x1e>
 8000222:	f7ff ffd5 	bl	80001d0 <deregister_tm_clones>
 8000226:	4b05      	ldr	r3, [pc, #20]	; (800023c <__do_global_dtors_aux+0x24>)
 8000228:	2b00      	cmp	r3, #0
 800022a:	d002      	beq.n	8000232 <__do_global_dtors_aux+0x1a>
 800022c:	4804      	ldr	r0, [pc, #16]	; (8000240 <__do_global_dtors_aux+0x28>)
 800022e:	e000      	b.n	8000232 <__do_global_dtors_aux+0x1a>
 8000230:	bf00      	nop
 8000232:	2301      	movs	r3, #1
 8000234:	7023      	strb	r3, [r4, #0]
 8000236:	bd10      	pop	{r4, pc}
 8000238:	20000010 	.word	0x20000010
 800023c:	00000000 	.word	0x00000000
 8000240:	08002ee8 	.word	0x08002ee8

08000244 <frame_dummy>:
 8000244:	4b05      	ldr	r3, [pc, #20]	; (800025c <frame_dummy+0x18>)
 8000246:	b510      	push	{r4, lr}
 8000248:	2b00      	cmp	r3, #0
 800024a:	d003      	beq.n	8000254 <frame_dummy+0x10>
 800024c:	4904      	ldr	r1, [pc, #16]	; (8000260 <frame_dummy+0x1c>)
 800024e:	4805      	ldr	r0, [pc, #20]	; (8000264 <frame_dummy+0x20>)
 8000250:	e000      	b.n	8000254 <frame_dummy+0x10>
 8000252:	bf00      	nop
 8000254:	f7ff ffcc 	bl	80001f0 <register_tm_clones>
 8000258:	bd10      	pop	{r4, pc}
 800025a:	46c0      	nop			; (mov r8, r8)
 800025c:	00000000 	.word	0x00000000
 8000260:	20000014 	.word	0x20000014
 8000264:	08002ee8 	.word	0x08002ee8

08000268 <lcd_init>:
		return;


}

void lcd_init(){
 8000268:	b580      	push	{r7, lr}
 800026a:	b084      	sub	sp, #16
 800026c:	af00      	add	r7, sp, #0

	GPIOB->ODR |= ((uint16_t)1 << LCD_READ_EN);
 800026e:	4b88      	ldr	r3, [pc, #544]	; (8000490 <lcd_init+0x228>)
 8000270:	695a      	ldr	r2, [r3, #20]
 8000272:	4b87      	ldr	r3, [pc, #540]	; (8000490 <lcd_init+0x228>)
 8000274:	2180      	movs	r1, #128	; 0x80
 8000276:	00c9      	lsls	r1, r1, #3
 8000278:	430a      	orrs	r2, r1
 800027a:	615a      	str	r2, [r3, #20]
	GPIOB->ODR &= ~((uint16_t)1 << LCD_WRITE_EN);
 800027c:	4b84      	ldr	r3, [pc, #528]	; (8000490 <lcd_init+0x228>)
 800027e:	695a      	ldr	r2, [r3, #20]
 8000280:	4b83      	ldr	r3, [pc, #524]	; (8000490 <lcd_init+0x228>)
 8000282:	4984      	ldr	r1, [pc, #528]	; (8000494 <lcd_init+0x22c>)
 8000284:	400a      	ands	r2, r1
 8000286:	615a      	str	r2, [r3, #20]
	GPIOB->ODR &= ~((uint16_t)1 << LCD_A0);
 8000288:	4b81      	ldr	r3, [pc, #516]	; (8000490 <lcd_init+0x228>)
 800028a:	695a      	ldr	r2, [r3, #20]
 800028c:	4b80      	ldr	r3, [pc, #512]	; (8000490 <lcd_init+0x228>)
 800028e:	4982      	ldr	r1, [pc, #520]	; (8000498 <lcd_init+0x230>)
 8000290:	400a      	ands	r2, r1
 8000292:	615a      	str	r2, [r3, #20]

	//lcd_cs_low
	//lcd_rst high
	GPIOB->ODR |= ((uint16_t)1 << LCD_CS);
 8000294:	4b7e      	ldr	r3, [pc, #504]	; (8000490 <lcd_init+0x228>)
 8000296:	695a      	ldr	r2, [r3, #20]
 8000298:	4b7d      	ldr	r3, [pc, #500]	; (8000490 <lcd_init+0x228>)
 800029a:	2180      	movs	r1, #128	; 0x80
 800029c:	0049      	lsls	r1, r1, #1
 800029e:	430a      	orrs	r2, r1
 80002a0:	615a      	str	r2, [r3, #20]

	asm("NOP");
 80002a2:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 80002a4:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 80002a6:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 80002a8:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 80002aa:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 80002ac:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 80002ae:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 80002b0:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 80002b2:	46c0      	nop			; (mov r8, r8)
			asm("NOP");
 80002b4:	46c0      	nop			; (mov r8, r8)
			asm("NOP");
 80002b6:	46c0      	nop			; (mov r8, r8)
			asm("NOP");
 80002b8:	46c0      	nop			; (mov r8, r8)
			asm("NOP");
 80002ba:	46c0      	nop			; (mov r8, r8)
			asm("NOP");
 80002bc:	46c0      	nop			; (mov r8, r8)
			asm("NOP");
 80002be:	46c0      	nop			; (mov r8, r8)
			asm("NOP");
 80002c0:	46c0      	nop			; (mov r8, r8)


	GPIOB->ODR |= ((uint16_t)1 << LCD_RST);
 80002c2:	4b73      	ldr	r3, [pc, #460]	; (8000490 <lcd_init+0x228>)
 80002c4:	695a      	ldr	r2, [r3, #20]
 80002c6:	4b72      	ldr	r3, [pc, #456]	; (8000490 <lcd_init+0x228>)
 80002c8:	2180      	movs	r1, #128	; 0x80
 80002ca:	0089      	lsls	r1, r1, #2
 80002cc:	430a      	orrs	r2, r1
 80002ce:	615a      	str	r2, [r3, #20]
	asm("NOP");
 80002d0:	46c0      	nop			; (mov r8, r8)
			asm("NOP");
 80002d2:	46c0      	nop			; (mov r8, r8)
			asm("NOP");
 80002d4:	46c0      	nop			; (mov r8, r8)
			asm("NOP");
 80002d6:	46c0      	nop			; (mov r8, r8)
			asm("NOP");
 80002d8:	46c0      	nop			; (mov r8, r8)
			asm("NOP");
 80002da:	46c0      	nop			; (mov r8, r8)
			asm("NOP");
 80002dc:	46c0      	nop			; (mov r8, r8)
			asm("NOP");
 80002de:	46c0      	nop			; (mov r8, r8)
			asm("NOP");
 80002e0:	46c0      	nop			; (mov r8, r8)
				asm("NOP");
 80002e2:	46c0      	nop			; (mov r8, r8)
				asm("NOP");
 80002e4:	46c0      	nop			; (mov r8, r8)
				asm("NOP");
 80002e6:	46c0      	nop			; (mov r8, r8)
				asm("NOP");
 80002e8:	46c0      	nop			; (mov r8, r8)
				asm("NOP");
 80002ea:	46c0      	nop			; (mov r8, r8)
				asm("NOP");
 80002ec:	46c0      	nop			; (mov r8, r8)
				asm("NOP");
 80002ee:	46c0      	nop			; (mov r8, r8)
	GPIOB->ODR &= ~((uint16_t)1 << LCD_RST);
 80002f0:	4b67      	ldr	r3, [pc, #412]	; (8000490 <lcd_init+0x228>)
 80002f2:	695a      	ldr	r2, [r3, #20]
 80002f4:	4b66      	ldr	r3, [pc, #408]	; (8000490 <lcd_init+0x228>)
 80002f6:	4969      	ldr	r1, [pc, #420]	; (800049c <lcd_init+0x234>)
 80002f8:	400a      	ands	r2, r1
 80002fa:	615a      	str	r2, [r3, #20]
	asm("NOP");
 80002fc:	46c0      	nop			; (mov r8, r8)
			asm("NOP");
 80002fe:	46c0      	nop			; (mov r8, r8)
			asm("NOP");
 8000300:	46c0      	nop			; (mov r8, r8)
			asm("NOP");
 8000302:	46c0      	nop			; (mov r8, r8)
			asm("NOP");
 8000304:	46c0      	nop			; (mov r8, r8)
			asm("NOP");
 8000306:	46c0      	nop			; (mov r8, r8)
			asm("NOP");
 8000308:	46c0      	nop			; (mov r8, r8)
			asm("NOP");
 800030a:	46c0      	nop			; (mov r8, r8)
			asm("NOP");
 800030c:	46c0      	nop			; (mov r8, r8)
				asm("NOP");
 800030e:	46c0      	nop			; (mov r8, r8)
				asm("NOP");
 8000310:	46c0      	nop			; (mov r8, r8)
				asm("NOP");
 8000312:	46c0      	nop			; (mov r8, r8)
				asm("NOP");
 8000314:	46c0      	nop			; (mov r8, r8)
				asm("NOP");
 8000316:	46c0      	nop			; (mov r8, r8)
				asm("NOP");
 8000318:	46c0      	nop			; (mov r8, r8)
				asm("NOP");
 800031a:	46c0      	nop			; (mov r8, r8)
	GPIOB->ODR |= ((uint16_t)1 << LCD_RST);
 800031c:	4b5c      	ldr	r3, [pc, #368]	; (8000490 <lcd_init+0x228>)
 800031e:	695a      	ldr	r2, [r3, #20]
 8000320:	4b5b      	ldr	r3, [pc, #364]	; (8000490 <lcd_init+0x228>)
 8000322:	2180      	movs	r1, #128	; 0x80
 8000324:	0089      	lsls	r1, r1, #2
 8000326:	430a      	orrs	r2, r1
 8000328:	615a      	str	r2, [r3, #20]
	asm("NOP");
 800032a:	46c0      	nop			; (mov r8, r8)
			asm("NOP");
 800032c:	46c0      	nop			; (mov r8, r8)
			asm("NOP");
 800032e:	46c0      	nop			; (mov r8, r8)
			asm("NOP");
 8000330:	46c0      	nop			; (mov r8, r8)
			asm("NOP");
 8000332:	46c0      	nop			; (mov r8, r8)
			asm("NOP");
 8000334:	46c0      	nop			; (mov r8, r8)
			asm("NOP");
 8000336:	46c0      	nop			; (mov r8, r8)
			asm("NOP");
 8000338:	46c0      	nop			; (mov r8, r8)
			asm("NOP");
 800033a:	46c0      	nop			; (mov r8, r8)
				asm("NOP");
 800033c:	46c0      	nop			; (mov r8, r8)
				asm("NOP");
 800033e:	46c0      	nop			; (mov r8, r8)
				asm("NOP");
 8000340:	46c0      	nop			; (mov r8, r8)
				asm("NOP");
 8000342:	46c0      	nop			; (mov r8, r8)
				asm("NOP");
 8000344:	46c0      	nop			; (mov r8, r8)
				asm("NOP");
 8000346:	46c0      	nop			; (mov r8, r8)
				asm("NOP");
 8000348:	46c0      	nop			; (mov r8, r8)

	GPIOB->ODR &= ~((uint16_t)1 << LCD_CS);
 800034a:	4b51      	ldr	r3, [pc, #324]	; (8000490 <lcd_init+0x228>)
 800034c:	695a      	ldr	r2, [r3, #20]
 800034e:	4b50      	ldr	r3, [pc, #320]	; (8000490 <lcd_init+0x228>)
 8000350:	4953      	ldr	r1, [pc, #332]	; (80004a0 <lcd_init+0x238>)
 8000352:	400a      	ands	r2, r1
 8000354:	615a      	str	r2, [r3, #20]
	asm("NOP");
 8000356:	46c0      	nop			; (mov r8, r8)
			asm("NOP");
 8000358:	46c0      	nop			; (mov r8, r8)
			asm("NOP");
 800035a:	46c0      	nop			; (mov r8, r8)
			asm("NOP");
 800035c:	46c0      	nop			; (mov r8, r8)
			asm("NOP");
 800035e:	46c0      	nop			; (mov r8, r8)
			asm("NOP");
 8000360:	46c0      	nop			; (mov r8, r8)
			asm("NOP");
 8000362:	46c0      	nop			; (mov r8, r8)
			asm("NOP");
 8000364:	46c0      	nop			; (mov r8, r8)
			asm("NOP");
 8000366:	46c0      	nop			; (mov r8, r8)
				asm("NOP");
 8000368:	46c0      	nop			; (mov r8, r8)
				asm("NOP");
 800036a:	46c0      	nop			; (mov r8, r8)
				asm("NOP");
 800036c:	46c0      	nop			; (mov r8, r8)
				asm("NOP");
 800036e:	46c0      	nop			; (mov r8, r8)
				asm("NOP");
 8000370:	46c0      	nop			; (mov r8, r8)
				asm("NOP");
 8000372:	46c0      	nop			; (mov r8, r8)
				asm("NOP");
 8000374:	46c0      	nop			; (mov r8, r8)




	//write 0xA2 10100010
	lcd_write(0, 0xA2);
 8000376:	21a2      	movs	r1, #162	; 0xa2
 8000378:	2000      	movs	r0, #0
 800037a:	f000 f893 	bl	80004a4 <lcd_write>

	//xA0
	lcd_write(0, 0xA0);
 800037e:	21a0      	movs	r1, #160	; 0xa0
 8000380:	2000      	movs	r0, #0
 8000382:	f000 f88f 	bl	80004a4 <lcd_write>

	//0xC0
	lcd_write(0, 0xC0);
 8000386:	21c0      	movs	r1, #192	; 0xc0
 8000388:	2000      	movs	r0, #0
 800038a:	f000 f88b 	bl	80004a4 <lcd_write>

	//0x24
	lcd_write(0, 0x24);
 800038e:	2124      	movs	r1, #36	; 0x24
 8000390:	2000      	movs	r0, #0
 8000392:	f000 f887 	bl	80004a4 <lcd_write>

	//0x81
	lcd_write(0, 0x81);
 8000396:	2181      	movs	r1, #129	; 0x81
 8000398:	2000      	movs	r0, #0
 800039a:	f000 f883 	bl	80004a4 <lcd_write>

	//0x20
	lcd_write(0, 0x10);
 800039e:	2110      	movs	r1, #16
 80003a0:	2000      	movs	r0, #0
 80003a2:	f000 f87f 	bl	80004a4 <lcd_write>

	//0x2C
	lcd_write(0, 0x2C);
 80003a6:	212c      	movs	r1, #44	; 0x2c
 80003a8:	2000      	movs	r0, #0
 80003aa:	f000 f87b 	bl	80004a4 <lcd_write>

	//0x2E
	lcd_write(0, 0x2E);
 80003ae:	212e      	movs	r1, #46	; 0x2e
 80003b0:	2000      	movs	r0, #0
 80003b2:	f000 f877 	bl	80004a4 <lcd_write>

	//0x2F
	lcd_write(0, 0x2F);
 80003b6:	212f      	movs	r1, #47	; 0x2f
 80003b8:	2000      	movs	r0, #0
 80003ba:	f000 f873 	bl	80004a4 <lcd_write>

	//



	uint8_t page_addr = 0xD0;
 80003be:	1dfb      	adds	r3, r7, #7
 80003c0:	22d0      	movs	r2, #208	; 0xd0
 80003c2:	701a      	strb	r2, [r3, #0]
	//lcd_write(0,0xB0); //page 0 command

	for(int y = 0; y < 8; y++)
 80003c4:	2300      	movs	r3, #0
 80003c6:	60fb      	str	r3, [r7, #12]
 80003c8:	e059      	b.n	800047e <lcd_init+0x216>
	{
		lcd_write(0,0b10110000+y);
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	b2db      	uxtb	r3, r3
 80003ce:	3b50      	subs	r3, #80	; 0x50
 80003d0:	b2db      	uxtb	r3, r3
 80003d2:	0019      	movs	r1, r3
 80003d4:	2000      	movs	r0, #0
 80003d6:	f000 f865 	bl	80004a4 <lcd_write>
		lcd_write(0,0b00010000);
 80003da:	2110      	movs	r1, #16
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f861 	bl	80004a4 <lcd_write>
		lcd_write(0,0b00000000);
 80003e2:	2100      	movs	r1, #0
 80003e4:	2000      	movs	r0, #0
 80003e6:	f000 f85d 	bl	80004a4 <lcd_write>
		for(int k = 0; k < 131; k++)
 80003ea:	2300      	movs	r3, #0
 80003ec:	60bb      	str	r3, [r7, #8]
 80003ee:	e038      	b.n	8000462 <lcd_init+0x1fa>
		{
			GPIOB->ODR |= ((uint16_t)1 << LCD_A0);
 80003f0:	4b27      	ldr	r3, [pc, #156]	; (8000490 <lcd_init+0x228>)
 80003f2:	695a      	ldr	r2, [r3, #20]
 80003f4:	4b26      	ldr	r3, [pc, #152]	; (8000490 <lcd_init+0x228>)
 80003f6:	2180      	movs	r1, #128	; 0x80
 80003f8:	0149      	lsls	r1, r1, #5
 80003fa:	430a      	orrs	r2, r1
 80003fc:	615a      	str	r2, [r3, #20]
			GPIOB->ODR &= ~((uint16_t)1 << LCD_WRITE_EN);
 80003fe:	4b24      	ldr	r3, [pc, #144]	; (8000490 <lcd_init+0x228>)
 8000400:	695a      	ldr	r2, [r3, #20]
 8000402:	4b23      	ldr	r3, [pc, #140]	; (8000490 <lcd_init+0x228>)
 8000404:	4923      	ldr	r1, [pc, #140]	; (8000494 <lcd_init+0x22c>)
 8000406:	400a      	ands	r2, r1
 8000408:	615a      	str	r2, [r3, #20]

			uint16_t gpio_data = GPIOB->ODR;
 800040a:	4b21      	ldr	r3, [pc, #132]	; (8000490 <lcd_init+0x228>)
 800040c:	695a      	ldr	r2, [r3, #20]
 800040e:	1d3b      	adds	r3, r7, #4
 8000410:	801a      	strh	r2, [r3, #0]
			gpio_data &= ((uint16_t)0xFF << 8);
 8000412:	1d3b      	adds	r3, r7, #4
 8000414:	1d3a      	adds	r2, r7, #4
 8000416:	8812      	ldrh	r2, [r2, #0]
 8000418:	21ff      	movs	r1, #255	; 0xff
 800041a:	438a      	bics	r2, r1
 800041c:	801a      	strh	r2, [r3, #0]
			gpio_data |= 0x00;
 800041e:	1d3b      	adds	r3, r7, #4
 8000420:	1d3a      	adds	r2, r7, #4
 8000422:	8812      	ldrh	r2, [r2, #0]
 8000424:	801a      	strh	r2, [r3, #0]
			GPIOB->ODR = gpio_data;
 8000426:	4b1a      	ldr	r3, [pc, #104]	; (8000490 <lcd_init+0x228>)
 8000428:	1d3a      	adds	r2, r7, #4
 800042a:	8812      	ldrh	r2, [r2, #0]
 800042c:	615a      	str	r2, [r3, #20]
			asm("NOP");
 800042e:	46c0      	nop			; (mov r8, r8)
					asm("NOP");
 8000430:	46c0      	nop			; (mov r8, r8)
					asm("NOP");
 8000432:	46c0      	nop			; (mov r8, r8)
					asm("NOP");
 8000434:	46c0      	nop			; (mov r8, r8)
					asm("NOP");
 8000436:	46c0      	nop			; (mov r8, r8)
					asm("NOP");
 8000438:	46c0      	nop			; (mov r8, r8)
					asm("NOP");
 800043a:	46c0      	nop			; (mov r8, r8)
					asm("NOP");
 800043c:	46c0      	nop			; (mov r8, r8)
					asm("NOP");
 800043e:	46c0      	nop			; (mov r8, r8)
						asm("NOP");
 8000440:	46c0      	nop			; (mov r8, r8)
						asm("NOP");
 8000442:	46c0      	nop			; (mov r8, r8)
						asm("NOP");
 8000444:	46c0      	nop			; (mov r8, r8)
						asm("NOP");
 8000446:	46c0      	nop			; (mov r8, r8)
						asm("NOP");
 8000448:	46c0      	nop			; (mov r8, r8)
						asm("NOP");
 800044a:	46c0      	nop			; (mov r8, r8)
						asm("NOP");
 800044c:	46c0      	nop			; (mov r8, r8)

			GPIOB->ODR |= ((uint16_t)1 << LCD_WRITE_EN);
 800044e:	4b10      	ldr	r3, [pc, #64]	; (8000490 <lcd_init+0x228>)
 8000450:	695a      	ldr	r2, [r3, #20]
 8000452:	4b0f      	ldr	r3, [pc, #60]	; (8000490 <lcd_init+0x228>)
 8000454:	2180      	movs	r1, #128	; 0x80
 8000456:	0109      	lsls	r1, r1, #4
 8000458:	430a      	orrs	r2, r1
 800045a:	615a      	str	r2, [r3, #20]
		for(int k = 0; k < 131; k++)
 800045c:	68bb      	ldr	r3, [r7, #8]
 800045e:	3301      	adds	r3, #1
 8000460:	60bb      	str	r3, [r7, #8]
 8000462:	68bb      	ldr	r3, [r7, #8]
 8000464:	2b82      	cmp	r3, #130	; 0x82
 8000466:	ddc3      	ble.n	80003f0 <lcd_init+0x188>


		}
		//page_addr+=1;

		lcd_write(0,0xA4); //all pixels on (normal display)
 8000468:	21a4      	movs	r1, #164	; 0xa4
 800046a:	2000      	movs	r0, #0
 800046c:	f000 f81a 	bl	80004a4 <lcd_write>
			lcd_write(0,0xAF); //display on
 8000470:	21af      	movs	r1, #175	; 0xaf
 8000472:	2000      	movs	r0, #0
 8000474:	f000 f816 	bl	80004a4 <lcd_write>
	for(int y = 0; y < 8; y++)
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	3301      	adds	r3, #1
 800047c:	60fb      	str	r3, [r7, #12]
 800047e:	68fb      	ldr	r3, [r7, #12]
 8000480:	2b07      	cmp	r3, #7
 8000482:	dda2      	ble.n	80003ca <lcd_init+0x162>


	//lcd_write(0, 0b10101110);


}
 8000484:	46c0      	nop			; (mov r8, r8)
 8000486:	46c0      	nop			; (mov r8, r8)
 8000488:	46bd      	mov	sp, r7
 800048a:	b004      	add	sp, #16
 800048c:	bd80      	pop	{r7, pc}
 800048e:	46c0      	nop			; (mov r8, r8)
 8000490:	50000400 	.word	0x50000400
 8000494:	fffff7ff 	.word	0xfffff7ff
 8000498:	ffffefff 	.word	0xffffefff
 800049c:	fffffdff 	.word	0xfffffdff
 80004a0:	fffffeff 	.word	0xfffffeff

080004a4 <lcd_write>:
		GPIOB->ODR &= ~((uint16_t)1 << LCD_A0);
}
*/

void lcd_write(uint8_t cmd_dat, uint8_t data)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b084      	sub	sp, #16
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	0002      	movs	r2, r0
 80004ac:	1dfb      	adds	r3, r7, #7
 80004ae:	701a      	strb	r2, [r3, #0]
 80004b0:	1dbb      	adds	r3, r7, #6
 80004b2:	1c0a      	adds	r2, r1, #0
 80004b4:	701a      	strb	r2, [r3, #0]
	*/

	//for the 8080 parallel interface RWR should be low when writing to the display


	if(cmd_dat)
 80004b6:	1dfb      	adds	r3, r7, #7
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d007      	beq.n	80004ce <lcd_write+0x2a>
		GPIOB->ODR |= ((uint16_t)1 << LCD_A0);
 80004be:	4b1f      	ldr	r3, [pc, #124]	; (800053c <lcd_write+0x98>)
 80004c0:	695a      	ldr	r2, [r3, #20]
 80004c2:	4b1e      	ldr	r3, [pc, #120]	; (800053c <lcd_write+0x98>)
 80004c4:	2180      	movs	r1, #128	; 0x80
 80004c6:	0149      	lsls	r1, r1, #5
 80004c8:	430a      	orrs	r2, r1
 80004ca:	615a      	str	r2, [r3, #20]
 80004cc:	e005      	b.n	80004da <lcd_write+0x36>
	else
		GPIOB->ODR &= ~((uint16_t)1 << LCD_A0);
 80004ce:	4b1b      	ldr	r3, [pc, #108]	; (800053c <lcd_write+0x98>)
 80004d0:	695a      	ldr	r2, [r3, #20]
 80004d2:	4b1a      	ldr	r3, [pc, #104]	; (800053c <lcd_write+0x98>)
 80004d4:	491a      	ldr	r1, [pc, #104]	; (8000540 <lcd_write+0x9c>)
 80004d6:	400a      	ands	r2, r1
 80004d8:	615a      	str	r2, [r3, #20]


	//signals will be latched on the rising edge of wr
	//when rd is low data lines are in output mode

	GPIOB->ODR &= ~((uint16_t)1 << LCD_WRITE_EN);
 80004da:	4b18      	ldr	r3, [pc, #96]	; (800053c <lcd_write+0x98>)
 80004dc:	695a      	ldr	r2, [r3, #20]
 80004de:	4b17      	ldr	r3, [pc, #92]	; (800053c <lcd_write+0x98>)
 80004e0:	4918      	ldr	r1, [pc, #96]	; (8000544 <lcd_write+0xa0>)
 80004e2:	400a      	ands	r2, r1
 80004e4:	615a      	str	r2, [r3, #20]

	uint16_t gpio_data = GPIOB->ODR;
 80004e6:	4b15      	ldr	r3, [pc, #84]	; (800053c <lcd_write+0x98>)
 80004e8:	695a      	ldr	r2, [r3, #20]
 80004ea:	200e      	movs	r0, #14
 80004ec:	183b      	adds	r3, r7, r0
 80004ee:	801a      	strh	r2, [r3, #0]
	gpio_data &= ((uint16_t)0xFF << 8);
 80004f0:	183b      	adds	r3, r7, r0
 80004f2:	183a      	adds	r2, r7, r0
 80004f4:	8812      	ldrh	r2, [r2, #0]
 80004f6:	21ff      	movs	r1, #255	; 0xff
 80004f8:	438a      	bics	r2, r1
 80004fa:	801a      	strh	r2, [r3, #0]
	gpio_data |= data;
 80004fc:	1dbb      	adds	r3, r7, #6
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	b299      	uxth	r1, r3
 8000502:	183b      	adds	r3, r7, r0
 8000504:	183a      	adds	r2, r7, r0
 8000506:	8812      	ldrh	r2, [r2, #0]
 8000508:	430a      	orrs	r2, r1
 800050a:	801a      	strh	r2, [r3, #0]
	GPIOB->ODR = gpio_data;
 800050c:	4b0b      	ldr	r3, [pc, #44]	; (800053c <lcd_write+0x98>)
 800050e:	183a      	adds	r2, r7, r0
 8000510:	8812      	ldrh	r2, [r2, #0]
 8000512:	615a      	str	r2, [r3, #20]



		//HAL_Delay(1);
	//HAL_Delay(1);
	asm("NOP");
 8000514:	46c0      	nop			; (mov r8, r8)
	asm("NOP");
 8000516:	46c0      	nop			; (mov r8, r8)
	asm("NOP");
 8000518:	46c0      	nop			; (mov r8, r8)
	asm("NOP");
 800051a:	46c0      	nop			; (mov r8, r8)
	asm("NOP");
 800051c:	46c0      	nop			; (mov r8, r8)
	asm("NOP");
 800051e:	46c0      	nop			; (mov r8, r8)
	asm("NOP");
 8000520:	46c0      	nop			; (mov r8, r8)
	asm("NOP");
 8000522:	46c0      	nop			; (mov r8, r8)


	GPIOB->ODR |= ((uint16_t)1 << LCD_WRITE_EN);
 8000524:	4b05      	ldr	r3, [pc, #20]	; (800053c <lcd_write+0x98>)
 8000526:	695a      	ldr	r2, [r3, #20]
 8000528:	4b04      	ldr	r3, [pc, #16]	; (800053c <lcd_write+0x98>)
 800052a:	2180      	movs	r1, #128	; 0x80
 800052c:	0109      	lsls	r1, r1, #4
 800052e:	430a      	orrs	r2, r1
 8000530:	615a      	str	r2, [r3, #20]

	//HAL_Delay(1);
}
 8000532:	46c0      	nop			; (mov r8, r8)
 8000534:	46bd      	mov	sp, r7
 8000536:	b004      	add	sp, #16
 8000538:	bd80      	pop	{r7, pc}
 800053a:	46c0      	nop			; (mov r8, r8)
 800053c:	50000400 	.word	0x50000400
 8000540:	ffffefff 	.word	0xffffefff
 8000544:	fffff7ff 	.word	0xfffff7ff

08000548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054e:	f000 fc0d 	bl	8000d6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000552:	f000 f831 	bl	80005b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000556:	f000 f955 	bl	8000804 <MX_GPIO_Init>
  MX_TIM1_Init();
 800055a:	f000 f887 	bl	800066c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */



  uint32_t input_port = GPIOA->ODR;
 800055e:	23a0      	movs	r3, #160	; 0xa0
 8000560:	05db      	lsls	r3, r3, #23
 8000562:	695b      	ldr	r3, [r3, #20]
 8000564:	607b      	str	r3, [r7, #4]
  	  //GPIOB->ODR=0;
  //TIM1->CCR1 = 0xFFF;
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000566:	4b11      	ldr	r3, [pc, #68]	; (80005ac <main+0x64>)
 8000568:	2100      	movs	r1, #0
 800056a:	0018      	movs	r0, r3
 800056c:	f002 facc 	bl	8002b08 <HAL_TIMEx_PWMN_Start>

  lcd_init();
 8000570:	f7ff fe7a 	bl	8000268 <lcd_init>
  TIM1->CCR1 = 1024;
 8000574:	4b0e      	ldr	r3, [pc, #56]	; (80005b0 <main+0x68>)
 8000576:	2280      	movs	r2, #128	; 0x80
 8000578:	00d2      	lsls	r2, r2, #3
 800057a:	635a      	str	r2, [r3, #52]	; 0x34
	      	//	lcd_init();
	      		  //CH1_DC = 0;
	      	 // }

	      	//  HAL_Delay(10);
	  if(fade_counter > 0)
 800057c:	4b0d      	ldr	r3, [pc, #52]	; (80005b4 <main+0x6c>)
 800057e:	881b      	ldrh	r3, [r3, #0]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d00d      	beq.n	80005a0 <main+0x58>
	  {
		  fade_counter -= 1;
 8000584:	4b0b      	ldr	r3, [pc, #44]	; (80005b4 <main+0x6c>)
 8000586:	881b      	ldrh	r3, [r3, #0]
 8000588:	3b01      	subs	r3, #1
 800058a:	b29a      	uxth	r2, r3
 800058c:	4b09      	ldr	r3, [pc, #36]	; (80005b4 <main+0x6c>)
 800058e:	801a      	strh	r2, [r3, #0]
		  TIM1->CCR1 = fade_counter;
 8000590:	4b08      	ldr	r3, [pc, #32]	; (80005b4 <main+0x6c>)
 8000592:	881a      	ldrh	r2, [r3, #0]
 8000594:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <main+0x68>)
 8000596:	635a      	str	r2, [r3, #52]	; 0x34
		  HAL_Delay(1);
 8000598:	2001      	movs	r0, #1
 800059a:	f000 fc6d 	bl	8000e78 <HAL_Delay>
 800059e:	e7ed      	b.n	800057c <main+0x34>
	  }
	  else
		  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80005a0:	2101      	movs	r1, #1
 80005a2:	2000      	movs	r0, #0
 80005a4:	f000 ff2a 	bl	80013fc <HAL_PWR_EnterSLEEPMode>
	  if(fade_counter > 0)
 80005a8:	e7e8      	b.n	800057c <main+0x34>
 80005aa:	46c0      	nop			; (mov r8, r8)
 80005ac:	2000002c 	.word	0x2000002c
 80005b0:	40012c00 	.word	0x40012c00
 80005b4:	20000000 	.word	0x20000000

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b590      	push	{r4, r7, lr}
 80005ba:	b093      	sub	sp, #76	; 0x4c
 80005bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	2414      	movs	r4, #20
 80005c0:	193b      	adds	r3, r7, r4
 80005c2:	0018      	movs	r0, r3
 80005c4:	2334      	movs	r3, #52	; 0x34
 80005c6:	001a      	movs	r2, r3
 80005c8:	2100      	movs	r1, #0
 80005ca:	f002 fc60 	bl	8002e8e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	0018      	movs	r0, r3
 80005d2:	2310      	movs	r3, #16
 80005d4:	001a      	movs	r2, r3
 80005d6:	2100      	movs	r1, #0
 80005d8:	f002 fc59 	bl	8002e8e <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005dc:	2380      	movs	r3, #128	; 0x80
 80005de:	009b      	lsls	r3, r3, #2
 80005e0:	0018      	movs	r0, r3
 80005e2:	f000 ff41 	bl	8001468 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e6:	193b      	adds	r3, r7, r4
 80005e8:	2202      	movs	r2, #2
 80005ea:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ec:	193b      	adds	r3, r7, r4
 80005ee:	2280      	movs	r2, #128	; 0x80
 80005f0:	0052      	lsls	r2, r2, #1
 80005f2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80005f4:	0021      	movs	r1, r4
 80005f6:	187b      	adds	r3, r7, r1
 80005f8:	2200      	movs	r2, #0
 80005fa:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005fc:	187b      	adds	r3, r7, r1
 80005fe:	2240      	movs	r2, #64	; 0x40
 8000600:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000602:	187b      	adds	r3, r7, r1
 8000604:	2202      	movs	r2, #2
 8000606:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000608:	187b      	adds	r3, r7, r1
 800060a:	2202      	movs	r2, #2
 800060c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800060e:	187b      	adds	r3, r7, r1
 8000610:	2200      	movs	r2, #0
 8000612:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000614:	187b      	adds	r3, r7, r1
 8000616:	2208      	movs	r2, #8
 8000618:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800061a:	187b      	adds	r3, r7, r1
 800061c:	2280      	movs	r2, #128	; 0x80
 800061e:	0292      	lsls	r2, r2, #10
 8000620:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000622:	187b      	adds	r3, r7, r1
 8000624:	2280      	movs	r2, #128	; 0x80
 8000626:	0592      	lsls	r2, r2, #22
 8000628:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062a:	187b      	adds	r3, r7, r1
 800062c:	0018      	movs	r0, r3
 800062e:	f000 ff9f 	bl	8001570 <HAL_RCC_OscConfig>
 8000632:	1e03      	subs	r3, r0, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000636:	f000 f961 	bl	80008fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063a:	1d3b      	adds	r3, r7, #4
 800063c:	2207      	movs	r2, #7
 800063e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000640:	1d3b      	adds	r3, r7, #4
 8000642:	2202      	movs	r2, #2
 8000644:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000646:	1d3b      	adds	r3, r7, #4
 8000648:	2200      	movs	r2, #0
 800064a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800064c:	1d3b      	adds	r3, r7, #4
 800064e:	2200      	movs	r2, #0
 8000650:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	2102      	movs	r1, #2
 8000656:	0018      	movs	r0, r3
 8000658:	f001 fa9a 	bl	8001b90 <HAL_RCC_ClockConfig>
 800065c:	1e03      	subs	r3, r0, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000660:	f000 f94c 	bl	80008fc <Error_Handler>
  }
}
 8000664:	46c0      	nop			; (mov r8, r8)
 8000666:	46bd      	mov	sp, r7
 8000668:	b013      	add	sp, #76	; 0x4c
 800066a:	bd90      	pop	{r4, r7, pc}

0800066c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b09c      	sub	sp, #112	; 0x70
 8000670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000672:	2360      	movs	r3, #96	; 0x60
 8000674:	18fb      	adds	r3, r7, r3
 8000676:	0018      	movs	r0, r3
 8000678:	2310      	movs	r3, #16
 800067a:	001a      	movs	r2, r3
 800067c:	2100      	movs	r1, #0
 800067e:	f002 fc06 	bl	8002e8e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000682:	2354      	movs	r3, #84	; 0x54
 8000684:	18fb      	adds	r3, r7, r3
 8000686:	0018      	movs	r0, r3
 8000688:	230c      	movs	r3, #12
 800068a:	001a      	movs	r2, r3
 800068c:	2100      	movs	r1, #0
 800068e:	f002 fbfe 	bl	8002e8e <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000692:	2338      	movs	r3, #56	; 0x38
 8000694:	18fb      	adds	r3, r7, r3
 8000696:	0018      	movs	r0, r3
 8000698:	231c      	movs	r3, #28
 800069a:	001a      	movs	r2, r3
 800069c:	2100      	movs	r1, #0
 800069e:	f002 fbf6 	bl	8002e8e <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	0018      	movs	r0, r3
 80006a6:	2334      	movs	r3, #52	; 0x34
 80006a8:	001a      	movs	r2, r3
 80006aa:	2100      	movs	r1, #0
 80006ac:	f002 fbef 	bl	8002e8e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006b0:	4b52      	ldr	r3, [pc, #328]	; (80007fc <MX_TIM1_Init+0x190>)
 80006b2:	4a53      	ldr	r2, [pc, #332]	; (8000800 <MX_TIM1_Init+0x194>)
 80006b4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80006b6:	4b51      	ldr	r3, [pc, #324]	; (80007fc <MX_TIM1_Init+0x190>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006bc:	4b4f      	ldr	r3, [pc, #316]	; (80007fc <MX_TIM1_Init+0x190>)
 80006be:	2200      	movs	r2, #0
 80006c0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 80006c2:	4b4e      	ldr	r3, [pc, #312]	; (80007fc <MX_TIM1_Init+0x190>)
 80006c4:	2280      	movs	r2, #128	; 0x80
 80006c6:	00d2      	lsls	r2, r2, #3
 80006c8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006ca:	4b4c      	ldr	r3, [pc, #304]	; (80007fc <MX_TIM1_Init+0x190>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006d0:	4b4a      	ldr	r3, [pc, #296]	; (80007fc <MX_TIM1_Init+0x190>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006d6:	4b49      	ldr	r3, [pc, #292]	; (80007fc <MX_TIM1_Init+0x190>)
 80006d8:	2280      	movs	r2, #128	; 0x80
 80006da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006dc:	4b47      	ldr	r3, [pc, #284]	; (80007fc <MX_TIM1_Init+0x190>)
 80006de:	0018      	movs	r0, r3
 80006e0:	f001 fbe0 	bl	8001ea4 <HAL_TIM_Base_Init>
 80006e4:	1e03      	subs	r3, r0, #0
 80006e6:	d001      	beq.n	80006ec <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 80006e8:	f000 f908 	bl	80008fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006ec:	2160      	movs	r1, #96	; 0x60
 80006ee:	187b      	adds	r3, r7, r1
 80006f0:	2280      	movs	r2, #128	; 0x80
 80006f2:	0152      	lsls	r2, r2, #5
 80006f4:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006f6:	187a      	adds	r2, r7, r1
 80006f8:	4b40      	ldr	r3, [pc, #256]	; (80007fc <MX_TIM1_Init+0x190>)
 80006fa:	0011      	movs	r1, r2
 80006fc:	0018      	movs	r0, r3
 80006fe:	f001 fd89 	bl	8002214 <HAL_TIM_ConfigClockSource>
 8000702:	1e03      	subs	r3, r0, #0
 8000704:	d001      	beq.n	800070a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000706:	f000 f8f9 	bl	80008fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800070a:	4b3c      	ldr	r3, [pc, #240]	; (80007fc <MX_TIM1_Init+0x190>)
 800070c:	0018      	movs	r0, r3
 800070e:	f001 fc21 	bl	8001f54 <HAL_TIM_PWM_Init>
 8000712:	1e03      	subs	r3, r0, #0
 8000714:	d001      	beq.n	800071a <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 8000716:	f000 f8f1 	bl	80008fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800071a:	2154      	movs	r1, #84	; 0x54
 800071c:	187b      	adds	r3, r7, r1
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000722:	187b      	adds	r3, r7, r1
 8000724:	2200      	movs	r2, #0
 8000726:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000728:	187b      	adds	r3, r7, r1
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800072e:	187a      	adds	r2, r7, r1
 8000730:	4b32      	ldr	r3, [pc, #200]	; (80007fc <MX_TIM1_Init+0x190>)
 8000732:	0011      	movs	r1, r2
 8000734:	0018      	movs	r0, r3
 8000736:	f002 fa7f 	bl	8002c38 <HAL_TIMEx_MasterConfigSynchronization>
 800073a:	1e03      	subs	r3, r0, #0
 800073c:	d001      	beq.n	8000742 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800073e:	f000 f8dd 	bl	80008fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000742:	2138      	movs	r1, #56	; 0x38
 8000744:	187b      	adds	r3, r7, r1
 8000746:	2260      	movs	r2, #96	; 0x60
 8000748:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800074a:	187b      	adds	r3, r7, r1
 800074c:	2200      	movs	r2, #0
 800074e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000750:	187b      	adds	r3, r7, r1
 8000752:	2200      	movs	r2, #0
 8000754:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000756:	187b      	adds	r3, r7, r1
 8000758:	2200      	movs	r2, #0
 800075a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800075c:	187b      	adds	r3, r7, r1
 800075e:	2200      	movs	r2, #0
 8000760:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000762:	187b      	adds	r3, r7, r1
 8000764:	2200      	movs	r2, #0
 8000766:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8000768:	187b      	adds	r3, r7, r1
 800076a:	2280      	movs	r2, #128	; 0x80
 800076c:	0092      	lsls	r2, r2, #2
 800076e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000770:	1879      	adds	r1, r7, r1
 8000772:	4b22      	ldr	r3, [pc, #136]	; (80007fc <MX_TIM1_Init+0x190>)
 8000774:	2200      	movs	r2, #0
 8000776:	0018      	movs	r0, r3
 8000778:	f001 fc4c 	bl	8002014 <HAL_TIM_PWM_ConfigChannel>
 800077c:	1e03      	subs	r3, r0, #0
 800077e:	d001      	beq.n	8000784 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8000780:	f000 f8bc 	bl	80008fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000784:	1d3b      	adds	r3, r7, #4
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800078a:	1d3b      	adds	r3, r7, #4
 800078c:	2200      	movs	r2, #0
 800078e:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	2200      	movs	r2, #0
 8000794:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000796:	1d3b      	adds	r3, r7, #4
 8000798:	2200      	movs	r2, #0
 800079a:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800079c:	1d3b      	adds	r3, r7, #4
 800079e:	2200      	movs	r2, #0
 80007a0:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	2280      	movs	r2, #128	; 0x80
 80007a6:	0192      	lsls	r2, r2, #6
 80007a8:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	2200      	movs	r2, #0
 80007ae:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80007b0:	1d3b      	adds	r3, r7, #4
 80007b2:	2200      	movs	r2, #0
 80007b4:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	2200      	movs	r2, #0
 80007ba:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	2280      	movs	r2, #128	; 0x80
 80007c0:	0492      	lsls	r2, r2, #18
 80007c2:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80007c4:	1d3b      	adds	r3, r7, #4
 80007c6:	2200      	movs	r2, #0
 80007c8:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80007ca:	1d3b      	adds	r3, r7, #4
 80007cc:	2200      	movs	r2, #0
 80007ce:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007d0:	1d3b      	adds	r3, r7, #4
 80007d2:	2200      	movs	r2, #0
 80007d4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007d6:	1d3a      	adds	r2, r7, #4
 80007d8:	4b08      	ldr	r3, [pc, #32]	; (80007fc <MX_TIM1_Init+0x190>)
 80007da:	0011      	movs	r1, r2
 80007dc:	0018      	movs	r0, r3
 80007de:	f002 fa8d 	bl	8002cfc <HAL_TIMEx_ConfigBreakDeadTime>
 80007e2:	1e03      	subs	r3, r0, #0
 80007e4:	d001      	beq.n	80007ea <MX_TIM1_Init+0x17e>
  {
    Error_Handler();
 80007e6:	f000 f889 	bl	80008fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007ea:	4b04      	ldr	r3, [pc, #16]	; (80007fc <MX_TIM1_Init+0x190>)
 80007ec:	0018      	movs	r0, r3
 80007ee:	f000 f8cf 	bl	8000990 <HAL_TIM_MspPostInit>

}
 80007f2:	46c0      	nop			; (mov r8, r8)
 80007f4:	46bd      	mov	sp, r7
 80007f6:	b01c      	add	sp, #112	; 0x70
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	46c0      	nop			; (mov r8, r8)
 80007fc:	2000002c 	.word	0x2000002c
 8000800:	40012c00 	.word	0x40012c00

08000804 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000804:	b590      	push	{r4, r7, lr}
 8000806:	b089      	sub	sp, #36	; 0x24
 8000808:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080a:	240c      	movs	r4, #12
 800080c:	193b      	adds	r3, r7, r4
 800080e:	0018      	movs	r0, r3
 8000810:	2314      	movs	r3, #20
 8000812:	001a      	movs	r2, r3
 8000814:	2100      	movs	r1, #0
 8000816:	f002 fb3a 	bl	8002e8e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081a:	4b33      	ldr	r3, [pc, #204]	; (80008e8 <MX_GPIO_Init+0xe4>)
 800081c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800081e:	4b32      	ldr	r3, [pc, #200]	; (80008e8 <MX_GPIO_Init+0xe4>)
 8000820:	2101      	movs	r1, #1
 8000822:	430a      	orrs	r2, r1
 8000824:	635a      	str	r2, [r3, #52]	; 0x34
 8000826:	4b30      	ldr	r3, [pc, #192]	; (80008e8 <MX_GPIO_Init+0xe4>)
 8000828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800082a:	2201      	movs	r2, #1
 800082c:	4013      	ands	r3, r2
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000832:	4b2d      	ldr	r3, [pc, #180]	; (80008e8 <MX_GPIO_Init+0xe4>)
 8000834:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000836:	4b2c      	ldr	r3, [pc, #176]	; (80008e8 <MX_GPIO_Init+0xe4>)
 8000838:	2102      	movs	r1, #2
 800083a:	430a      	orrs	r2, r1
 800083c:	635a      	str	r2, [r3, #52]	; 0x34
 800083e:	4b2a      	ldr	r3, [pc, #168]	; (80008e8 <MX_GPIO_Init+0xe4>)
 8000840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000842:	2202      	movs	r2, #2
 8000844:	4013      	ands	r3, r2
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_11
 800084a:	4928      	ldr	r1, [pc, #160]	; (80008ec <MX_GPIO_Init+0xe8>)
 800084c:	4b28      	ldr	r3, [pc, #160]	; (80008f0 <MX_GPIO_Init+0xec>)
 800084e:	2200      	movs	r2, #0
 8000850:	0018      	movs	r0, r3
 8000852:	f000 fd77 	bl	8001344 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8000856:	2380      	movs	r3, #128	; 0x80
 8000858:	00db      	lsls	r3, r3, #3
 800085a:	4825      	ldr	r0, [pc, #148]	; (80008f0 <MX_GPIO_Init+0xec>)
 800085c:	2201      	movs	r2, #1
 800085e:	0019      	movs	r1, r3
 8000860:	f000 fd70 	bl	8001344 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : I_D0_Pin I_D1_Pin I_D2_Pin I_D3_Pin
                           I_D4_Pin I_D5_Pin I_D6_Pin I_D7_Pin
                           I_RES_Pin PA9 PA11 */
  GPIO_InitStruct.Pin = I_D0_Pin|I_D1_Pin|I_D2_Pin|I_D3_Pin
 8000864:	193b      	adds	r3, r7, r4
 8000866:	4a23      	ldr	r2, [pc, #140]	; (80008f4 <MX_GPIO_Init+0xf0>)
 8000868:	601a      	str	r2, [r3, #0]
                          |I_D4_Pin|I_D5_Pin|I_D6_Pin|I_D7_Pin
                          |I_RES_Pin|GPIO_PIN_9|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800086a:	193b      	adds	r3, r7, r4
 800086c:	2200      	movs	r2, #0
 800086e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	193b      	adds	r3, r7, r4
 8000872:	2200      	movs	r2, #0
 8000874:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000876:	193a      	adds	r2, r7, r4
 8000878:	23a0      	movs	r3, #160	; 0xa0
 800087a:	05db      	lsls	r3, r3, #23
 800087c:	0011      	movs	r1, r2
 800087e:	0018      	movs	r0, r3
 8000880:	f000 fbfc 	bl	800107c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB3 PB4
                           PB5 PB6 PB7 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000884:	193b      	adds	r3, r7, r4
 8000886:	4a1c      	ldr	r2, [pc, #112]	; (80008f8 <MX_GPIO_Init+0xf4>)
 8000888:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088a:	193b      	adds	r3, r7, r4
 800088c:	2201      	movs	r2, #1
 800088e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	193b      	adds	r3, r7, r4
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000896:	193b      	adds	r3, r7, r4
 8000898:	2203      	movs	r2, #3
 800089a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800089c:	193b      	adds	r3, r7, r4
 800089e:	4a14      	ldr	r2, [pc, #80]	; (80008f0 <MX_GPIO_Init+0xec>)
 80008a0:	0019      	movs	r1, r3
 80008a2:	0010      	movs	r0, r2
 80008a4:	f000 fbea 	bl	800107c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008a8:	0021      	movs	r1, r4
 80008aa:	187b      	adds	r3, r7, r1
 80008ac:	2280      	movs	r2, #128	; 0x80
 80008ae:	00d2      	lsls	r2, r2, #3
 80008b0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008b2:	187b      	adds	r3, r7, r1
 80008b4:	2284      	movs	r2, #132	; 0x84
 80008b6:	0392      	lsls	r2, r2, #14
 80008b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	187b      	adds	r3, r7, r1
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c0:	187a      	adds	r2, r7, r1
 80008c2:	23a0      	movs	r3, #160	; 0xa0
 80008c4:	05db      	lsls	r3, r3, #23
 80008c6:	0011      	movs	r1, r2
 80008c8:	0018      	movs	r0, r3
 80008ca:	f000 fbd7 	bl	800107c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2100      	movs	r1, #0
 80008d2:	2007      	movs	r0, #7
 80008d4:	f000 fba0 	bl	8001018 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80008d8:	2007      	movs	r0, #7
 80008da:	f000 fbb2 	bl	8001042 <HAL_NVIC_EnableIRQ>

}
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	46bd      	mov	sp, r7
 80008e2:	b009      	add	sp, #36	; 0x24
 80008e4:	bd90      	pop	{r4, r7, pc}
 80008e6:	46c0      	nop			; (mov r8, r8)
 80008e8:	40021000 	.word	0x40021000
 80008ec:	00001bff 	.word	0x00001bff
 80008f0:	50000400 	.word	0x50000400
 80008f4:	00000bff 	.word	0x00000bff
 80008f8:	00001fff 	.word	0x00001fff

080008fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000900:	b672      	cpsid	i
}
 8000902:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000904:	46c0      	nop			; (mov r8, r8)
 8000906:	e7fd      	b.n	8000904 <Error_Handler+0x8>

08000908 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800090e:	4b0f      	ldr	r3, [pc, #60]	; (800094c <HAL_MspInit+0x44>)
 8000910:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000912:	4b0e      	ldr	r3, [pc, #56]	; (800094c <HAL_MspInit+0x44>)
 8000914:	2101      	movs	r1, #1
 8000916:	430a      	orrs	r2, r1
 8000918:	641a      	str	r2, [r3, #64]	; 0x40
 800091a:	4b0c      	ldr	r3, [pc, #48]	; (800094c <HAL_MspInit+0x44>)
 800091c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091e:	2201      	movs	r2, #1
 8000920:	4013      	ands	r3, r2
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000926:	4b09      	ldr	r3, [pc, #36]	; (800094c <HAL_MspInit+0x44>)
 8000928:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800092a:	4b08      	ldr	r3, [pc, #32]	; (800094c <HAL_MspInit+0x44>)
 800092c:	2180      	movs	r1, #128	; 0x80
 800092e:	0549      	lsls	r1, r1, #21
 8000930:	430a      	orrs	r2, r1
 8000932:	63da      	str	r2, [r3, #60]	; 0x3c
 8000934:	4b05      	ldr	r3, [pc, #20]	; (800094c <HAL_MspInit+0x44>)
 8000936:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000938:	2380      	movs	r3, #128	; 0x80
 800093a:	055b      	lsls	r3, r3, #21
 800093c:	4013      	ands	r3, r2
 800093e:	603b      	str	r3, [r7, #0]
 8000940:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	46bd      	mov	sp, r7
 8000946:	b002      	add	sp, #8
 8000948:	bd80      	pop	{r7, pc}
 800094a:	46c0      	nop			; (mov r8, r8)
 800094c:	40021000 	.word	0x40021000

08000950 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a0a      	ldr	r2, [pc, #40]	; (8000988 <HAL_TIM_Base_MspInit+0x38>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d10d      	bne.n	800097e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000962:	4b0a      	ldr	r3, [pc, #40]	; (800098c <HAL_TIM_Base_MspInit+0x3c>)
 8000964:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000966:	4b09      	ldr	r3, [pc, #36]	; (800098c <HAL_TIM_Base_MspInit+0x3c>)
 8000968:	2180      	movs	r1, #128	; 0x80
 800096a:	0109      	lsls	r1, r1, #4
 800096c:	430a      	orrs	r2, r1
 800096e:	641a      	str	r2, [r3, #64]	; 0x40
 8000970:	4b06      	ldr	r3, [pc, #24]	; (800098c <HAL_TIM_Base_MspInit+0x3c>)
 8000972:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000974:	2380      	movs	r3, #128	; 0x80
 8000976:	011b      	lsls	r3, r3, #4
 8000978:	4013      	ands	r3, r2
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	46bd      	mov	sp, r7
 8000982:	b004      	add	sp, #16
 8000984:	bd80      	pop	{r7, pc}
 8000986:	46c0      	nop			; (mov r8, r8)
 8000988:	40012c00 	.word	0x40012c00
 800098c:	40021000 	.word	0x40021000

08000990 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000990:	b590      	push	{r4, r7, lr}
 8000992:	b089      	sub	sp, #36	; 0x24
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000998:	240c      	movs	r4, #12
 800099a:	193b      	adds	r3, r7, r4
 800099c:	0018      	movs	r0, r3
 800099e:	2314      	movs	r3, #20
 80009a0:	001a      	movs	r2, r3
 80009a2:	2100      	movs	r1, #0
 80009a4:	f002 fa73 	bl	8002e8e <memset>
  if(htim->Instance==TIM1)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a14      	ldr	r2, [pc, #80]	; (8000a00 <HAL_TIM_MspPostInit+0x70>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d122      	bne.n	80009f8 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b2:	4b14      	ldr	r3, [pc, #80]	; (8000a04 <HAL_TIM_MspPostInit+0x74>)
 80009b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009b6:	4b13      	ldr	r3, [pc, #76]	; (8000a04 <HAL_TIM_MspPostInit+0x74>)
 80009b8:	2102      	movs	r1, #2
 80009ba:	430a      	orrs	r2, r1
 80009bc:	635a      	str	r2, [r3, #52]	; 0x34
 80009be:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <HAL_TIM_MspPostInit+0x74>)
 80009c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009c2:	2202      	movs	r2, #2
 80009c4:	4013      	ands	r3, r2
 80009c6:	60bb      	str	r3, [r7, #8]
 80009c8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PB13     ------> TIM1_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80009ca:	193b      	adds	r3, r7, r4
 80009cc:	2280      	movs	r2, #128	; 0x80
 80009ce:	0192      	lsls	r2, r2, #6
 80009d0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d2:	0021      	movs	r1, r4
 80009d4:	187b      	adds	r3, r7, r1
 80009d6:	2202      	movs	r2, #2
 80009d8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009da:	187b      	adds	r3, r7, r1
 80009dc:	2201      	movs	r2, #1
 80009de:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e0:	187b      	adds	r3, r7, r1
 80009e2:	2203      	movs	r2, #3
 80009e4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80009e6:	187b      	adds	r3, r7, r1
 80009e8:	2202      	movs	r2, #2
 80009ea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ec:	187b      	adds	r3, r7, r1
 80009ee:	4a06      	ldr	r2, [pc, #24]	; (8000a08 <HAL_TIM_MspPostInit+0x78>)
 80009f0:	0019      	movs	r1, r3
 80009f2:	0010      	movs	r0, r2
 80009f4:	f000 fb42 	bl	800107c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80009f8:	46c0      	nop			; (mov r8, r8)
 80009fa:	46bd      	mov	sp, r7
 80009fc:	b009      	add	sp, #36	; 0x24
 80009fe:	bd90      	pop	{r4, r7, pc}
 8000a00:	40012c00 	.word	0x40012c00
 8000a04:	40021000 	.word	0x40021000
 8000a08:	50000400 	.word	0x50000400

08000a0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a10:	46c0      	nop			; (mov r8, r8)
 8000a12:	e7fd      	b.n	8000a10 <NMI_Handler+0x4>

08000a14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a18:	46c0      	nop			; (mov r8, r8)
 8000a1a:	e7fd      	b.n	8000a18 <HardFault_Handler+0x4>

08000a1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a20:	46c0      	nop			; (mov r8, r8)
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a26:	b580      	push	{r7, lr}
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a2a:	46c0      	nop			; (mov r8, r8)
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}

08000a30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a34:	f000 fa04 	bl	8000e40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a38:	46c0      	nop			; (mov r8, r8)
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
	...

08000a40 <EXTI4_15_IRQHandler>:
uint8_t was_data = 0;

uint8_t datalines = 0;

void EXTI4_15_IRQHandler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000a46:	2380      	movs	r3, #128	; 0x80
 8000a48:	00db      	lsls	r3, r3, #3
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	f000 fc98 	bl	8001380 <HAL_GPIO_EXTI_IRQHandler>





  uint16_t in_data = GPIOA->IDR;
 8000a50:	23a0      	movs	r3, #160	; 0xa0
 8000a52:	05db      	lsls	r3, r3, #23
 8000a54:	691a      	ldr	r2, [r3, #16]
 8000a56:	1d3b      	adds	r3, r7, #4
 8000a58:	801a      	strh	r2, [r3, #0]
  uint8_t datacmd = ((in_data >> 11) & 1);
 8000a5a:	1d3b      	adds	r3, r7, #4
 8000a5c:	881b      	ldrh	r3, [r3, #0]
 8000a5e:	0adb      	lsrs	r3, r3, #11
 8000a60:	b29b      	uxth	r3, r3
 8000a62:	b2da      	uxtb	r2, r3
 8000a64:	1cfb      	adds	r3, r7, #3
 8000a66:	2101      	movs	r1, #1
 8000a68:	400a      	ands	r2, r1
 8000a6a:	701a      	strb	r2, [r3, #0]
  datalines = in_data;
 8000a6c:	1d3b      	adds	r3, r7, #4
 8000a6e:	881b      	ldrh	r3, [r3, #0]
 8000a70:	b2da      	uxtb	r2, r3
 8000a72:	4b99      	ldr	r3, [pc, #612]	; (8000cd8 <EXTI4_15_IRQHandler+0x298>)
 8000a74:	701a      	strb	r2, [r3, #0]

  if(skip_next)
 8000a76:	4b99      	ldr	r3, [pc, #612]	; (8000cdc <EXTI4_15_IRQHandler+0x29c>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d003      	beq.n	8000a86 <EXTI4_15_IRQHandler+0x46>
  {
	  skip_next = 0;
 8000a7e:	4b97      	ldr	r3, [pc, #604]	; (8000cdc <EXTI4_15_IRQHandler+0x29c>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	701a      	strb	r2, [r3, #0]
	  return;
 8000a84:	e125      	b.n	8000cd2 <EXTI4_15_IRQHandler+0x292>

  //if((in_data >> 8) & 1 == 0) //rst
  //	  return;


  if(datacmd == 0)
 8000a86:	1cfb      	adds	r3, r7, #3
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d000      	beq.n	8000a90 <EXTI4_15_IRQHandler+0x50>
 8000a8e:	e0a0      	b.n	8000bd2 <EXTI4_15_IRQHandler+0x192>
  {
	  if(skip_data)
 8000a90:	4b93      	ldr	r3, [pc, #588]	; (8000ce0 <EXTI4_15_IRQHandler+0x2a0>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d005      	beq.n	8000aa4 <EXTI4_15_IRQHandler+0x64>
	  {
		  state_tracker = 0;
 8000a98:	4b92      	ldr	r3, [pc, #584]	; (8000ce4 <EXTI4_15_IRQHandler+0x2a4>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	701a      	strb	r2, [r3, #0]
		  skip_data = 0;
 8000a9e:	4b90      	ldr	r3, [pc, #576]	; (8000ce0 <EXTI4_15_IRQHandler+0x2a0>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	701a      	strb	r2, [r3, #0]
	  }


	  if((uint8_t)in_data == 0b10000001 || (uint8_t)in_data == 0b10000010 || (uint8_t)in_data == 0b10101000)
 8000aa4:	1d3b      	adds	r3, r7, #4
 8000aa6:	881b      	ldrh	r3, [r3, #0]
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	2b81      	cmp	r3, #129	; 0x81
 8000aac:	d009      	beq.n	8000ac2 <EXTI4_15_IRQHandler+0x82>
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	881b      	ldrh	r3, [r3, #0]
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	2b82      	cmp	r3, #130	; 0x82
 8000ab6:	d004      	beq.n	8000ac2 <EXTI4_15_IRQHandler+0x82>
 8000ab8:	1d3b      	adds	r3, r7, #4
 8000aba:	881b      	ldrh	r3, [r3, #0]
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	2ba8      	cmp	r3, #168	; 0xa8
 8000ac0:	d103      	bne.n	8000aca <EXTI4_15_IRQHandler+0x8a>
	  {
		  skip_next = 1;
 8000ac2:	4b86      	ldr	r3, [pc, #536]	; (8000cdc <EXTI4_15_IRQHandler+0x29c>)
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	701a      	strb	r2, [r3, #0]
		  return;
 8000ac8:	e103      	b.n	8000cd2 <EXTI4_15_IRQHandler+0x292>
	  }
	  else
		  if(((uint8_t)in_data & 0b11110000) == 0b10110000) //page
 8000aca:	1d3b      	adds	r3, r7, #4
 8000acc:	881b      	ldrh	r3, [r3, #0]
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	001a      	movs	r2, r3
 8000ad2:	23f0      	movs	r3, #240	; 0xf0
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	2bb0      	cmp	r3, #176	; 0xb0
 8000ad8:	d100      	bne.n	8000adc <EXTI4_15_IRQHandler+0x9c>
 8000ada:	e09a      	b.n	8000c12 <EXTI4_15_IRQHandler+0x1d2>
		  {


		  }
		  else
			  if(((uint8_t)in_data & 0b11110000) == 0b00000000) //lower column
 8000adc:	1d3b      	adds	r3, r7, #4
 8000ade:	881b      	ldrh	r3, [r3, #0]
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	001a      	movs	r2, r3
 8000ae4:	23f0      	movs	r3, #240	; 0xf0
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	d127      	bne.n	8000b3a <EXTI4_15_IRQHandler+0xfa>
			  {
				  col_val = (datalines & 0xF); //take the lower nibble
 8000aea:	4b7b      	ldr	r3, [pc, #492]	; (8000cd8 <EXTI4_15_IRQHandler+0x298>)
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	220f      	movs	r2, #15
 8000af0:	4013      	ands	r3, r2
 8000af2:	b2da      	uxtb	r2, r3
 8000af4:	4b7c      	ldr	r3, [pc, #496]	; (8000ce8 <EXTI4_15_IRQHandler+0x2a8>)
 8000af6:	701a      	strb	r2, [r3, #0]

				  	  old_col_val = col_val;
 8000af8:	4b7b      	ldr	r3, [pc, #492]	; (8000ce8 <EXTI4_15_IRQHandler+0x2a8>)
 8000afa:	781a      	ldrb	r2, [r3, #0]
 8000afc:	4b7b      	ldr	r3, [pc, #492]	; (8000cec <EXTI4_15_IRQHandler+0x2ac>)
 8000afe:	701a      	strb	r2, [r3, #0]

				  	  if(col_val > 1)
 8000b00:	4b79      	ldr	r3, [pc, #484]	; (8000ce8 <EXTI4_15_IRQHandler+0x2a8>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d903      	bls.n	8000b10 <EXTI4_15_IRQHandler+0xd0>
				  		  ovf = 0;
 8000b08:	4b79      	ldr	r3, [pc, #484]	; (8000cf0 <EXTI4_15_IRQHandler+0x2b0>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	701a      	strb	r2, [r3, #0]
 8000b0e:	e002      	b.n	8000b16 <EXTI4_15_IRQHandler+0xd6>
				  	  else
				  		  ovf = 1;
 8000b10:	4b77      	ldr	r3, [pc, #476]	; (8000cf0 <EXTI4_15_IRQHandler+0x2b0>)
 8000b12:	2201      	movs	r2, #1
 8000b14:	701a      	strb	r2, [r3, #0]

				  	  col_val -= 2;
 8000b16:	4b74      	ldr	r3, [pc, #464]	; (8000ce8 <EXTI4_15_IRQHandler+0x2a8>)
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	3b02      	subs	r3, #2
 8000b1c:	b2da      	uxtb	r2, r3
 8000b1e:	4b72      	ldr	r3, [pc, #456]	; (8000ce8 <EXTI4_15_IRQHandler+0x2a8>)
 8000b20:	701a      	strb	r2, [r3, #0]

				  	  col_val &= 0xF; //trim if it overflowed
 8000b22:	4b71      	ldr	r3, [pc, #452]	; (8000ce8 <EXTI4_15_IRQHandler+0x2a8>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	220f      	movs	r2, #15
 8000b28:	4013      	ands	r3, r2
 8000b2a:	b2da      	uxtb	r2, r3
 8000b2c:	4b6e      	ldr	r3, [pc, #440]	; (8000ce8 <EXTI4_15_IRQHandler+0x2a8>)
 8000b2e:	701a      	strb	r2, [r3, #0]

				  	  datalines = col_val; //set it
 8000b30:	4b6d      	ldr	r3, [pc, #436]	; (8000ce8 <EXTI4_15_IRQHandler+0x2a8>)
 8000b32:	781a      	ldrb	r2, [r3, #0]
 8000b34:	4b68      	ldr	r3, [pc, #416]	; (8000cd8 <EXTI4_15_IRQHandler+0x298>)
 8000b36:	701a      	strb	r2, [r3, #0]
 8000b38:	e06b      	b.n	8000c12 <EXTI4_15_IRQHandler+0x1d2>

			  }

			  else
				  if(((uint8_t)in_data & 0b11110000) == 0b00010000) //upper column (on this system it always comes second)
 8000b3a:	1d3b      	adds	r3, r7, #4
 8000b3c:	881b      	ldrh	r3, [r3, #0]
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	001a      	movs	r2, r3
 8000b42:	23f0      	movs	r3, #240	; 0xf0
 8000b44:	4013      	ands	r3, r2
 8000b46:	2b10      	cmp	r3, #16
 8000b48:	d13a      	bne.n	8000bc0 <EXTI4_15_IRQHandler+0x180>
				  {
					  if(col_ctr == 0)
 8000b4a:	4b6a      	ldr	r3, [pc, #424]	; (8000cf4 <EXTI4_15_IRQHandler+0x2b4>)
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d102      	bne.n	8000b58 <EXTI4_15_IRQHandler+0x118>
					  			  col_val = 0;
 8000b52:	4b65      	ldr	r3, [pc, #404]	; (8000ce8 <EXTI4_15_IRQHandler+0x2a8>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	701a      	strb	r2, [r3, #0]

					  		  uint8_t local_col_val = datalines & 0xF; //take the lower nibble
 8000b58:	4b5f      	ldr	r3, [pc, #380]	; (8000cd8 <EXTI4_15_IRQHandler+0x298>)
 8000b5a:	781a      	ldrb	r2, [r3, #0]
 8000b5c:	1dfb      	adds	r3, r7, #7
 8000b5e:	210f      	movs	r1, #15
 8000b60:	400a      	ands	r2, r1
 8000b62:	701a      	strb	r2, [r3, #0]
					  		  col_val &= 0xF; //clear upper
 8000b64:	4b60      	ldr	r3, [pc, #384]	; (8000ce8 <EXTI4_15_IRQHandler+0x2a8>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	220f      	movs	r2, #15
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	b2da      	uxtb	r2, r3
 8000b6e:	4b5e      	ldr	r3, [pc, #376]	; (8000ce8 <EXTI4_15_IRQHandler+0x2a8>)
 8000b70:	701a      	strb	r2, [r3, #0]

					  		  if(ovf == 1 && local_col_val > 0)
 8000b72:	4b5f      	ldr	r3, [pc, #380]	; (8000cf0 <EXTI4_15_IRQHandler+0x2b0>)
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d10b      	bne.n	8000b92 <EXTI4_15_IRQHandler+0x152>
 8000b7a:	1dfb      	adds	r3, r7, #7
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d007      	beq.n	8000b92 <EXTI4_15_IRQHandler+0x152>
					  		  {
					  			  local_col_val -= 1;
 8000b82:	1dfb      	adds	r3, r7, #7
 8000b84:	1dfa      	adds	r2, r7, #7
 8000b86:	7812      	ldrb	r2, [r2, #0]
 8000b88:	3a01      	subs	r2, #1
 8000b8a:	701a      	strb	r2, [r3, #0]
					  			  ovf = 0;
 8000b8c:	4b58      	ldr	r3, [pc, #352]	; (8000cf0 <EXTI4_15_IRQHandler+0x2b0>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	701a      	strb	r2, [r3, #0]
					  		  }

					  			  col_val_ctr = 0;
 8000b92:	4b59      	ldr	r3, [pc, #356]	; (8000cf8 <EXTI4_15_IRQHandler+0x2b8>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	701a      	strb	r2, [r3, #0]

					  		  col_val |= (local_col_val << 4);
 8000b98:	1dfb      	adds	r3, r7, #7
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	011b      	lsls	r3, r3, #4
 8000b9e:	b25a      	sxtb	r2, r3
 8000ba0:	4b51      	ldr	r3, [pc, #324]	; (8000ce8 <EXTI4_15_IRQHandler+0x2a8>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	b25b      	sxtb	r3, r3
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	b25b      	sxtb	r3, r3
 8000baa:	b2da      	uxtb	r2, r3
 8000bac:	4b4e      	ldr	r3, [pc, #312]	; (8000ce8 <EXTI4_15_IRQHandler+0x2a8>)
 8000bae:	701a      	strb	r2, [r3, #0]

					  		  datalines = 0b00010000 | local_col_val;
 8000bb0:	1dfb      	adds	r3, r7, #7
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	2210      	movs	r2, #16
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	b2da      	uxtb	r2, r3
 8000bba:	4b47      	ldr	r3, [pc, #284]	; (8000cd8 <EXTI4_15_IRQHandler+0x298>)
 8000bbc:	701a      	strb	r2, [r3, #0]
 8000bbe:	e028      	b.n	8000c12 <EXTI4_15_IRQHandler+0x1d2>


				  }

				  else
					  if(((uint8_t)in_data & 0b11000000) == 0b01000000)
 8000bc0:	1d3b      	adds	r3, r7, #4
 8000bc2:	881b      	ldrh	r3, [r3, #0]
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	001a      	movs	r2, r3
 8000bc8:	23c0      	movs	r3, #192	; 0xc0
 8000bca:	4013      	ands	r3, r2
 8000bcc:	2b40      	cmp	r3, #64	; 0x40
 8000bce:	d020      	beq.n	8000c12 <EXTI4_15_IRQHandler+0x1d2>
					  {

					  }
					  else
						  return;
 8000bd0:	e07f      	b.n	8000cd2 <EXTI4_15_IRQHandler+0x292>
  }
  else
  {


	  if(skip_data)
 8000bd2:	4b43      	ldr	r3, [pc, #268]	; (8000ce0 <EXTI4_15_IRQHandler+0x2a0>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d000      	beq.n	8000bdc <EXTI4_15_IRQHandler+0x19c>
 8000bda:	e079      	b.n	8000cd0 <EXTI4_15_IRQHandler+0x290>
	  }

  			   else
  				   //if(ucol_flag)
  				   //{
  					   if(ovf && (old_col_val < 2))
 8000bdc:	4b44      	ldr	r3, [pc, #272]	; (8000cf0 <EXTI4_15_IRQHandler+0x2b0>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d016      	beq.n	8000c12 <EXTI4_15_IRQHandler+0x1d2>
 8000be4:	4b41      	ldr	r3, [pc, #260]	; (8000cec <EXTI4_15_IRQHandler+0x2ac>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d812      	bhi.n	8000c12 <EXTI4_15_IRQHandler+0x1d2>
  					   {
  						  if(col_val_ctr == old_col_val)
 8000bec:	4b42      	ldr	r3, [pc, #264]	; (8000cf8 <EXTI4_15_IRQHandler+0x2b8>)
 8000bee:	781a      	ldrb	r2, [r3, #0]
 8000bf0:	4b3e      	ldr	r3, [pc, #248]	; (8000cec <EXTI4_15_IRQHandler+0x2ac>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d105      	bne.n	8000c04 <EXTI4_15_IRQHandler+0x1c4>
  						  {
  							  ovf = 0;
 8000bf8:	4b3d      	ldr	r3, [pc, #244]	; (8000cf0 <EXTI4_15_IRQHandler+0x2b0>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	701a      	strb	r2, [r3, #0]
  							col_val_ctr = 0;
 8000bfe:	4b3e      	ldr	r3, [pc, #248]	; (8000cf8 <EXTI4_15_IRQHandler+0x2b8>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	701a      	strb	r2, [r3, #0]
  						  }
  						  col_val_ctr += 1;
 8000c04:	4b3c      	ldr	r3, [pc, #240]	; (8000cf8 <EXTI4_15_IRQHandler+0x2b8>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	3301      	adds	r3, #1
 8000c0a:	b2da      	uxtb	r2, r3
 8000c0c:	4b3a      	ldr	r3, [pc, #232]	; (8000cf8 <EXTI4_15_IRQHandler+0x2b8>)
 8000c0e:	701a      	strb	r2, [r3, #0]
  						  return;
 8000c10:	e05f      	b.n	8000cd2 <EXTI4_15_IRQHandler+0x292>
  }




  if(datacmd)
 8000c12:	1cfb      	adds	r3, r7, #3
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d007      	beq.n	8000c2a <EXTI4_15_IRQHandler+0x1ea>
  	  GPIOB->ODR |= 0x1000;
 8000c1a:	4b38      	ldr	r3, [pc, #224]	; (8000cfc <EXTI4_15_IRQHandler+0x2bc>)
 8000c1c:	695a      	ldr	r2, [r3, #20]
 8000c1e:	4b37      	ldr	r3, [pc, #220]	; (8000cfc <EXTI4_15_IRQHandler+0x2bc>)
 8000c20:	2180      	movs	r1, #128	; 0x80
 8000c22:	0149      	lsls	r1, r1, #5
 8000c24:	430a      	orrs	r2, r1
 8000c26:	615a      	str	r2, [r3, #20]
 8000c28:	e005      	b.n	8000c36 <EXTI4_15_IRQHandler+0x1f6>
    else
  	  GPIOB->ODR &= 0b1110111111111111;
 8000c2a:	4b34      	ldr	r3, [pc, #208]	; (8000cfc <EXTI4_15_IRQHandler+0x2bc>)
 8000c2c:	695a      	ldr	r2, [r3, #20]
 8000c2e:	4b33      	ldr	r3, [pc, #204]	; (8000cfc <EXTI4_15_IRQHandler+0x2bc>)
 8000c30:	4933      	ldr	r1, [pc, #204]	; (8000d00 <EXTI4_15_IRQHandler+0x2c0>)
 8000c32:	400a      	ands	r2, r1
 8000c34:	615a      	str	r2, [r3, #20]

    GPIOB->ODR &= 0b1111011111111111;
 8000c36:	4b31      	ldr	r3, [pc, #196]	; (8000cfc <EXTI4_15_IRQHandler+0x2bc>)
 8000c38:	695a      	ldr	r2, [r3, #20]
 8000c3a:	4b30      	ldr	r3, [pc, #192]	; (8000cfc <EXTI4_15_IRQHandler+0x2bc>)
 8000c3c:	4931      	ldr	r1, [pc, #196]	; (8000d04 <EXTI4_15_IRQHandler+0x2c4>)
 8000c3e:	400a      	ands	r2, r1
 8000c40:	615a      	str	r2, [r3, #20]


  	  uint16_t odrbak = GPIOB->ODR;
 8000c42:	4b2e      	ldr	r3, [pc, #184]	; (8000cfc <EXTI4_15_IRQHandler+0x2bc>)
 8000c44:	695a      	ldr	r2, [r3, #20]
 8000c46:	003b      	movs	r3, r7
 8000c48:	801a      	strh	r2, [r3, #0]
  	  odrbak &= 0xFF00;
 8000c4a:	003b      	movs	r3, r7
 8000c4c:	003a      	movs	r2, r7
 8000c4e:	8812      	ldrh	r2, [r2, #0]
 8000c50:	21ff      	movs	r1, #255	; 0xff
 8000c52:	438a      	bics	r2, r1
 8000c54:	801a      	strh	r2, [r3, #0]
  	  odrbak |= datalines;
 8000c56:	4b20      	ldr	r3, [pc, #128]	; (8000cd8 <EXTI4_15_IRQHandler+0x298>)
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	0019      	movs	r1, r3
 8000c5c:	003b      	movs	r3, r7
 8000c5e:	003a      	movs	r2, r7
 8000c60:	8812      	ldrh	r2, [r2, #0]
 8000c62:	430a      	orrs	r2, r1
 8000c64:	801a      	strh	r2, [r3, #0]
  	  GPIOB->ODR = odrbak;
 8000c66:	4b25      	ldr	r3, [pc, #148]	; (8000cfc <EXTI4_15_IRQHandler+0x2bc>)
 8000c68:	003a      	movs	r2, r7
 8000c6a:	8812      	ldrh	r2, [r2, #0]
 8000c6c:	615a      	str	r2, [r3, #20]


  		  GPIOB->ODR |= 0x800; //wr latch
 8000c6e:	4b23      	ldr	r3, [pc, #140]	; (8000cfc <EXTI4_15_IRQHandler+0x2bc>)
 8000c70:	695a      	ldr	r2, [r3, #20]
 8000c72:	4b22      	ldr	r3, [pc, #136]	; (8000cfc <EXTI4_15_IRQHandler+0x2bc>)
 8000c74:	2180      	movs	r1, #128	; 0x80
 8000c76:	0109      	lsls	r1, r1, #4
 8000c78:	430a      	orrs	r2, r1
 8000c7a:	615a      	str	r2, [r3, #20]



  		  //watch for command sequence B0 01 1F and skip data until next command

  		if(datacmd == 0)
 8000c7c:	1cfb      	adds	r3, r7, #3
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d126      	bne.n	8000cd2 <EXTI4_15_IRQHandler+0x292>
  		  {
  		  if(last_command == 0xB0)
 8000c84:	4b20      	ldr	r3, [pc, #128]	; (8000d08 <EXTI4_15_IRQHandler+0x2c8>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	2bb0      	cmp	r3, #176	; 0xb0
 8000c8a:	d103      	bne.n	8000c94 <EXTI4_15_IRQHandler+0x254>
			{
				state_tracker = 1;
 8000c8c:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <EXTI4_15_IRQHandler+0x2a4>)
 8000c8e:	2201      	movs	r2, #1
 8000c90:	701a      	strb	r2, [r3, #0]
 8000c92:	e017      	b.n	8000cc4 <EXTI4_15_IRQHandler+0x284>
			}
			else
				if(last_command == 0x1 && ((in_data & 0xFF) == 0x1f) && state_tracker == 1)
 8000c94:	4b1c      	ldr	r3, [pc, #112]	; (8000d08 <EXTI4_15_IRQHandler+0x2c8>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d110      	bne.n	8000cbe <EXTI4_15_IRQHandler+0x27e>
 8000c9c:	1d3b      	adds	r3, r7, #4
 8000c9e:	881b      	ldrh	r3, [r3, #0]
 8000ca0:	22ff      	movs	r2, #255	; 0xff
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	2b1f      	cmp	r3, #31
 8000ca6:	d10a      	bne.n	8000cbe <EXTI4_15_IRQHandler+0x27e>
 8000ca8:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <EXTI4_15_IRQHandler+0x2a4>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	d106      	bne.n	8000cbe <EXTI4_15_IRQHandler+0x27e>
				{
					skip_data = 1;
 8000cb0:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <EXTI4_15_IRQHandler+0x2a0>)
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	701a      	strb	r2, [r3, #0]
					state_tracker = 0;
 8000cb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <EXTI4_15_IRQHandler+0x2a4>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	701a      	strb	r2, [r3, #0]
 8000cbc:	e002      	b.n	8000cc4 <EXTI4_15_IRQHandler+0x284>
				}
				else
					state_tracker = 0;
 8000cbe:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <EXTI4_15_IRQHandler+0x2a4>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	701a      	strb	r2, [r3, #0]

			last_command = in_data;
 8000cc4:	1d3b      	adds	r3, r7, #4
 8000cc6:	881b      	ldrh	r3, [r3, #0]
 8000cc8:	b2da      	uxtb	r2, r3
 8000cca:	4b0f      	ldr	r3, [pc, #60]	; (8000d08 <EXTI4_15_IRQHandler+0x2c8>)
 8000ccc:	701a      	strb	r2, [r3, #0]
 8000cce:	e000      	b.n	8000cd2 <EXTI4_15_IRQHandler+0x292>
		  return;
 8000cd0:	46c0      	nop			; (mov r8, r8)
  		  }



  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	b002      	add	sp, #8
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	20000081 	.word	0x20000081
 8000cdc:	20000078 	.word	0x20000078
 8000ce0:	2000007b 	.word	0x2000007b
 8000ce4:	2000007a 	.word	0x2000007a
 8000ce8:	2000007c 	.word	0x2000007c
 8000cec:	2000007d 	.word	0x2000007d
 8000cf0:	2000007e 	.word	0x2000007e
 8000cf4:	20000080 	.word	0x20000080
 8000cf8:	2000007f 	.word	0x2000007f
 8000cfc:	50000400 	.word	0x50000400
 8000d00:	0000efff 	.word	0x0000efff
 8000d04:	0000f7ff 	.word	0x0000f7ff
 8000d08:	20000079 	.word	0x20000079

08000d0c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d10:	46c0      	nop			; (mov r8, r8)
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
	...

08000d18 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d18:	480d      	ldr	r0, [pc, #52]	; (8000d50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d1a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d1c:	f7ff fff6 	bl	8000d0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d20:	480c      	ldr	r0, [pc, #48]	; (8000d54 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d22:	490d      	ldr	r1, [pc, #52]	; (8000d58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d24:	4a0d      	ldr	r2, [pc, #52]	; (8000d5c <LoopForever+0xe>)
  movs r3, #0
 8000d26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d28:	e002      	b.n	8000d30 <LoopCopyDataInit>

08000d2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d2e:	3304      	adds	r3, #4

08000d30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d34:	d3f9      	bcc.n	8000d2a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d36:	4a0a      	ldr	r2, [pc, #40]	; (8000d60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d38:	4c0a      	ldr	r4, [pc, #40]	; (8000d64 <LoopForever+0x16>)
  movs r3, #0
 8000d3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d3c:	e001      	b.n	8000d42 <LoopFillZerobss>

08000d3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d40:	3204      	adds	r2, #4

08000d42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d44:	d3fb      	bcc.n	8000d3e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d46:	f002 f8ab 	bl	8002ea0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000d4a:	f7ff fbfd 	bl	8000548 <main>

08000d4e <LoopForever>:

LoopForever:
  b LoopForever
 8000d4e:	e7fe      	b.n	8000d4e <LoopForever>
  ldr   r0, =_estack
 8000d50:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000d54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d58:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000d5c:	08002f9c 	.word	0x08002f9c
  ldr r2, =_sbss
 8000d60:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000d64:	20000088 	.word	0x20000088

08000d68 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d68:	e7fe      	b.n	8000d68 <ADC1_IRQHandler>
	...

08000d6c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d72:	1dfb      	adds	r3, r7, #7
 8000d74:	2200      	movs	r2, #0
 8000d76:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d78:	4b0b      	ldr	r3, [pc, #44]	; (8000da8 <HAL_Init+0x3c>)
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	4b0a      	ldr	r3, [pc, #40]	; (8000da8 <HAL_Init+0x3c>)
 8000d7e:	2180      	movs	r1, #128	; 0x80
 8000d80:	0049      	lsls	r1, r1, #1
 8000d82:	430a      	orrs	r2, r1
 8000d84:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d86:	2003      	movs	r0, #3
 8000d88:	f000 f810 	bl	8000dac <HAL_InitTick>
 8000d8c:	1e03      	subs	r3, r0, #0
 8000d8e:	d003      	beq.n	8000d98 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000d90:	1dfb      	adds	r3, r7, #7
 8000d92:	2201      	movs	r2, #1
 8000d94:	701a      	strb	r2, [r3, #0]
 8000d96:	e001      	b.n	8000d9c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000d98:	f7ff fdb6 	bl	8000908 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d9c:	1dfb      	adds	r3, r7, #7
 8000d9e:	781b      	ldrb	r3, [r3, #0]
}
 8000da0:	0018      	movs	r0, r3
 8000da2:	46bd      	mov	sp, r7
 8000da4:	b002      	add	sp, #8
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	40022000 	.word	0x40022000

08000dac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dac:	b590      	push	{r4, r7, lr}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000db4:	230f      	movs	r3, #15
 8000db6:	18fb      	adds	r3, r7, r3
 8000db8:	2200      	movs	r2, #0
 8000dba:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000dbc:	4b1d      	ldr	r3, [pc, #116]	; (8000e34 <HAL_InitTick+0x88>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d02b      	beq.n	8000e1c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000dc4:	4b1c      	ldr	r3, [pc, #112]	; (8000e38 <HAL_InitTick+0x8c>)
 8000dc6:	681c      	ldr	r4, [r3, #0]
 8000dc8:	4b1a      	ldr	r3, [pc, #104]	; (8000e34 <HAL_InitTick+0x88>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	0019      	movs	r1, r3
 8000dce:	23fa      	movs	r3, #250	; 0xfa
 8000dd0:	0098      	lsls	r0, r3, #2
 8000dd2:	f7ff f971 	bl	80000b8 <__udivsi3>
 8000dd6:	0003      	movs	r3, r0
 8000dd8:	0019      	movs	r1, r3
 8000dda:	0020      	movs	r0, r4
 8000ddc:	f7ff f96c 	bl	80000b8 <__udivsi3>
 8000de0:	0003      	movs	r3, r0
 8000de2:	0018      	movs	r0, r3
 8000de4:	f000 f93d 	bl	8001062 <HAL_SYSTICK_Config>
 8000de8:	1e03      	subs	r3, r0, #0
 8000dea:	d112      	bne.n	8000e12 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2b03      	cmp	r3, #3
 8000df0:	d80a      	bhi.n	8000e08 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000df2:	6879      	ldr	r1, [r7, #4]
 8000df4:	2301      	movs	r3, #1
 8000df6:	425b      	negs	r3, r3
 8000df8:	2200      	movs	r2, #0
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	f000 f90c 	bl	8001018 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e00:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <HAL_InitTick+0x90>)
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	e00d      	b.n	8000e24 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000e08:	230f      	movs	r3, #15
 8000e0a:	18fb      	adds	r3, r7, r3
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	701a      	strb	r2, [r3, #0]
 8000e10:	e008      	b.n	8000e24 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e12:	230f      	movs	r3, #15
 8000e14:	18fb      	adds	r3, r7, r3
 8000e16:	2201      	movs	r2, #1
 8000e18:	701a      	strb	r2, [r3, #0]
 8000e1a:	e003      	b.n	8000e24 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e1c:	230f      	movs	r3, #15
 8000e1e:	18fb      	adds	r3, r7, r3
 8000e20:	2201      	movs	r2, #1
 8000e22:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000e24:	230f      	movs	r3, #15
 8000e26:	18fb      	adds	r3, r7, r3
 8000e28:	781b      	ldrb	r3, [r3, #0]
}
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	b005      	add	sp, #20
 8000e30:	bd90      	pop	{r4, r7, pc}
 8000e32:	46c0      	nop			; (mov r8, r8)
 8000e34:	2000000c 	.word	0x2000000c
 8000e38:	20000004 	.word	0x20000004
 8000e3c:	20000008 	.word	0x20000008

08000e40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e44:	4b05      	ldr	r3, [pc, #20]	; (8000e5c <HAL_IncTick+0x1c>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	001a      	movs	r2, r3
 8000e4a:	4b05      	ldr	r3, [pc, #20]	; (8000e60 <HAL_IncTick+0x20>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	18d2      	adds	r2, r2, r3
 8000e50:	4b03      	ldr	r3, [pc, #12]	; (8000e60 <HAL_IncTick+0x20>)
 8000e52:	601a      	str	r2, [r3, #0]
}
 8000e54:	46c0      	nop			; (mov r8, r8)
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	46c0      	nop			; (mov r8, r8)
 8000e5c:	2000000c 	.word	0x2000000c
 8000e60:	20000084 	.word	0x20000084

08000e64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  return uwTick;
 8000e68:	4b02      	ldr	r3, [pc, #8]	; (8000e74 <HAL_GetTick+0x10>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
}
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	46c0      	nop			; (mov r8, r8)
 8000e74:	20000084 	.word	0x20000084

08000e78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e80:	f7ff fff0 	bl	8000e64 <HAL_GetTick>
 8000e84:	0003      	movs	r3, r0
 8000e86:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	d005      	beq.n	8000e9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e92:	4b0a      	ldr	r3, [pc, #40]	; (8000ebc <HAL_Delay+0x44>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	001a      	movs	r2, r3
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	189b      	adds	r3, r3, r2
 8000e9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e9e:	46c0      	nop			; (mov r8, r8)
 8000ea0:	f7ff ffe0 	bl	8000e64 <HAL_GetTick>
 8000ea4:	0002      	movs	r2, r0
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	68fa      	ldr	r2, [r7, #12]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d8f7      	bhi.n	8000ea0 <HAL_Delay+0x28>
  {
  }
}
 8000eb0:	46c0      	nop			; (mov r8, r8)
 8000eb2:	46c0      	nop			; (mov r8, r8)
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	b004      	add	sp, #16
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	46c0      	nop			; (mov r8, r8)
 8000ebc:	2000000c 	.word	0x2000000c

08000ec0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	0002      	movs	r2, r0
 8000ec8:	1dfb      	adds	r3, r7, #7
 8000eca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ecc:	1dfb      	adds	r3, r7, #7
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	2b7f      	cmp	r3, #127	; 0x7f
 8000ed2:	d809      	bhi.n	8000ee8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ed4:	1dfb      	adds	r3, r7, #7
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	001a      	movs	r2, r3
 8000eda:	231f      	movs	r3, #31
 8000edc:	401a      	ands	r2, r3
 8000ede:	4b04      	ldr	r3, [pc, #16]	; (8000ef0 <__NVIC_EnableIRQ+0x30>)
 8000ee0:	2101      	movs	r1, #1
 8000ee2:	4091      	lsls	r1, r2
 8000ee4:	000a      	movs	r2, r1
 8000ee6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000ee8:	46c0      	nop			; (mov r8, r8)
 8000eea:	46bd      	mov	sp, r7
 8000eec:	b002      	add	sp, #8
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	e000e100 	.word	0xe000e100

08000ef4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ef4:	b590      	push	{r4, r7, lr}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	0002      	movs	r2, r0
 8000efc:	6039      	str	r1, [r7, #0]
 8000efe:	1dfb      	adds	r3, r7, #7
 8000f00:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f02:	1dfb      	adds	r3, r7, #7
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	2b7f      	cmp	r3, #127	; 0x7f
 8000f08:	d828      	bhi.n	8000f5c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f0a:	4a2f      	ldr	r2, [pc, #188]	; (8000fc8 <__NVIC_SetPriority+0xd4>)
 8000f0c:	1dfb      	adds	r3, r7, #7
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	b25b      	sxtb	r3, r3
 8000f12:	089b      	lsrs	r3, r3, #2
 8000f14:	33c0      	adds	r3, #192	; 0xc0
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	589b      	ldr	r3, [r3, r2]
 8000f1a:	1dfa      	adds	r2, r7, #7
 8000f1c:	7812      	ldrb	r2, [r2, #0]
 8000f1e:	0011      	movs	r1, r2
 8000f20:	2203      	movs	r2, #3
 8000f22:	400a      	ands	r2, r1
 8000f24:	00d2      	lsls	r2, r2, #3
 8000f26:	21ff      	movs	r1, #255	; 0xff
 8000f28:	4091      	lsls	r1, r2
 8000f2a:	000a      	movs	r2, r1
 8000f2c:	43d2      	mvns	r2, r2
 8000f2e:	401a      	ands	r2, r3
 8000f30:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	019b      	lsls	r3, r3, #6
 8000f36:	22ff      	movs	r2, #255	; 0xff
 8000f38:	401a      	ands	r2, r3
 8000f3a:	1dfb      	adds	r3, r7, #7
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	0018      	movs	r0, r3
 8000f40:	2303      	movs	r3, #3
 8000f42:	4003      	ands	r3, r0
 8000f44:	00db      	lsls	r3, r3, #3
 8000f46:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f48:	481f      	ldr	r0, [pc, #124]	; (8000fc8 <__NVIC_SetPriority+0xd4>)
 8000f4a:	1dfb      	adds	r3, r7, #7
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	b25b      	sxtb	r3, r3
 8000f50:	089b      	lsrs	r3, r3, #2
 8000f52:	430a      	orrs	r2, r1
 8000f54:	33c0      	adds	r3, #192	; 0xc0
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f5a:	e031      	b.n	8000fc0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f5c:	4a1b      	ldr	r2, [pc, #108]	; (8000fcc <__NVIC_SetPriority+0xd8>)
 8000f5e:	1dfb      	adds	r3, r7, #7
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	0019      	movs	r1, r3
 8000f64:	230f      	movs	r3, #15
 8000f66:	400b      	ands	r3, r1
 8000f68:	3b08      	subs	r3, #8
 8000f6a:	089b      	lsrs	r3, r3, #2
 8000f6c:	3306      	adds	r3, #6
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	18d3      	adds	r3, r2, r3
 8000f72:	3304      	adds	r3, #4
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	1dfa      	adds	r2, r7, #7
 8000f78:	7812      	ldrb	r2, [r2, #0]
 8000f7a:	0011      	movs	r1, r2
 8000f7c:	2203      	movs	r2, #3
 8000f7e:	400a      	ands	r2, r1
 8000f80:	00d2      	lsls	r2, r2, #3
 8000f82:	21ff      	movs	r1, #255	; 0xff
 8000f84:	4091      	lsls	r1, r2
 8000f86:	000a      	movs	r2, r1
 8000f88:	43d2      	mvns	r2, r2
 8000f8a:	401a      	ands	r2, r3
 8000f8c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	019b      	lsls	r3, r3, #6
 8000f92:	22ff      	movs	r2, #255	; 0xff
 8000f94:	401a      	ands	r2, r3
 8000f96:	1dfb      	adds	r3, r7, #7
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	0018      	movs	r0, r3
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	4003      	ands	r3, r0
 8000fa0:	00db      	lsls	r3, r3, #3
 8000fa2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fa4:	4809      	ldr	r0, [pc, #36]	; (8000fcc <__NVIC_SetPriority+0xd8>)
 8000fa6:	1dfb      	adds	r3, r7, #7
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	001c      	movs	r4, r3
 8000fac:	230f      	movs	r3, #15
 8000fae:	4023      	ands	r3, r4
 8000fb0:	3b08      	subs	r3, #8
 8000fb2:	089b      	lsrs	r3, r3, #2
 8000fb4:	430a      	orrs	r2, r1
 8000fb6:	3306      	adds	r3, #6
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	18c3      	adds	r3, r0, r3
 8000fbc:	3304      	adds	r3, #4
 8000fbe:	601a      	str	r2, [r3, #0]
}
 8000fc0:	46c0      	nop			; (mov r8, r8)
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	b003      	add	sp, #12
 8000fc6:	bd90      	pop	{r4, r7, pc}
 8000fc8:	e000e100 	.word	0xe000e100
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	1e5a      	subs	r2, r3, #1
 8000fdc:	2380      	movs	r3, #128	; 0x80
 8000fde:	045b      	lsls	r3, r3, #17
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d301      	bcc.n	8000fe8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	e010      	b.n	800100a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fe8:	4b0a      	ldr	r3, [pc, #40]	; (8001014 <SysTick_Config+0x44>)
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	3a01      	subs	r2, #1
 8000fee:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	425b      	negs	r3, r3
 8000ff4:	2103      	movs	r1, #3
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	f7ff ff7c 	bl	8000ef4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ffc:	4b05      	ldr	r3, [pc, #20]	; (8001014 <SysTick_Config+0x44>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001002:	4b04      	ldr	r3, [pc, #16]	; (8001014 <SysTick_Config+0x44>)
 8001004:	2207      	movs	r2, #7
 8001006:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001008:	2300      	movs	r3, #0
}
 800100a:	0018      	movs	r0, r3
 800100c:	46bd      	mov	sp, r7
 800100e:	b002      	add	sp, #8
 8001010:	bd80      	pop	{r7, pc}
 8001012:	46c0      	nop			; (mov r8, r8)
 8001014:	e000e010 	.word	0xe000e010

08001018 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	60b9      	str	r1, [r7, #8]
 8001020:	607a      	str	r2, [r7, #4]
 8001022:	210f      	movs	r1, #15
 8001024:	187b      	adds	r3, r7, r1
 8001026:	1c02      	adds	r2, r0, #0
 8001028:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800102a:	68ba      	ldr	r2, [r7, #8]
 800102c:	187b      	adds	r3, r7, r1
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	b25b      	sxtb	r3, r3
 8001032:	0011      	movs	r1, r2
 8001034:	0018      	movs	r0, r3
 8001036:	f7ff ff5d 	bl	8000ef4 <__NVIC_SetPriority>
}
 800103a:	46c0      	nop			; (mov r8, r8)
 800103c:	46bd      	mov	sp, r7
 800103e:	b004      	add	sp, #16
 8001040:	bd80      	pop	{r7, pc}

08001042 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b082      	sub	sp, #8
 8001046:	af00      	add	r7, sp, #0
 8001048:	0002      	movs	r2, r0
 800104a:	1dfb      	adds	r3, r7, #7
 800104c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800104e:	1dfb      	adds	r3, r7, #7
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	b25b      	sxtb	r3, r3
 8001054:	0018      	movs	r0, r3
 8001056:	f7ff ff33 	bl	8000ec0 <__NVIC_EnableIRQ>
}
 800105a:	46c0      	nop			; (mov r8, r8)
 800105c:	46bd      	mov	sp, r7
 800105e:	b002      	add	sp, #8
 8001060:	bd80      	pop	{r7, pc}

08001062 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	b082      	sub	sp, #8
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	0018      	movs	r0, r3
 800106e:	f7ff ffaf 	bl	8000fd0 <SysTick_Config>
 8001072:	0003      	movs	r3, r0
}
 8001074:	0018      	movs	r0, r3
 8001076:	46bd      	mov	sp, r7
 8001078:	b002      	add	sp, #8
 800107a:	bd80      	pop	{r7, pc}

0800107c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001086:	2300      	movs	r3, #0
 8001088:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800108a:	e147      	b.n	800131c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2101      	movs	r1, #1
 8001092:	697a      	ldr	r2, [r7, #20]
 8001094:	4091      	lsls	r1, r2
 8001096:	000a      	movs	r2, r1
 8001098:	4013      	ands	r3, r2
 800109a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d100      	bne.n	80010a4 <HAL_GPIO_Init+0x28>
 80010a2:	e138      	b.n	8001316 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	2203      	movs	r2, #3
 80010aa:	4013      	ands	r3, r2
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d005      	beq.n	80010bc <HAL_GPIO_Init+0x40>
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	2203      	movs	r2, #3
 80010b6:	4013      	ands	r3, r2
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	d130      	bne.n	800111e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	2203      	movs	r2, #3
 80010c8:	409a      	lsls	r2, r3
 80010ca:	0013      	movs	r3, r2
 80010cc:	43da      	mvns	r2, r3
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	4013      	ands	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	68da      	ldr	r2, [r3, #12]
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	409a      	lsls	r2, r3
 80010de:	0013      	movs	r3, r2
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010f2:	2201      	movs	r2, #1
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	409a      	lsls	r2, r3
 80010f8:	0013      	movs	r3, r2
 80010fa:	43da      	mvns	r2, r3
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	4013      	ands	r3, r2
 8001100:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	091b      	lsrs	r3, r3, #4
 8001108:	2201      	movs	r2, #1
 800110a:	401a      	ands	r2, r3
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	409a      	lsls	r2, r3
 8001110:	0013      	movs	r3, r2
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	4313      	orrs	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	2203      	movs	r2, #3
 8001124:	4013      	ands	r3, r2
 8001126:	2b03      	cmp	r3, #3
 8001128:	d017      	beq.n	800115a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	68db      	ldr	r3, [r3, #12]
 800112e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	2203      	movs	r2, #3
 8001136:	409a      	lsls	r2, r3
 8001138:	0013      	movs	r3, r2
 800113a:	43da      	mvns	r2, r3
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	4013      	ands	r3, r2
 8001140:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	689a      	ldr	r2, [r3, #8]
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	409a      	lsls	r2, r3
 800114c:	0013      	movs	r3, r2
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	4313      	orrs	r3, r2
 8001152:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	2203      	movs	r2, #3
 8001160:	4013      	ands	r3, r2
 8001162:	2b02      	cmp	r3, #2
 8001164:	d123      	bne.n	80011ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	08da      	lsrs	r2, r3, #3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	3208      	adds	r2, #8
 800116e:	0092      	lsls	r2, r2, #2
 8001170:	58d3      	ldr	r3, [r2, r3]
 8001172:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	2207      	movs	r2, #7
 8001178:	4013      	ands	r3, r2
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	220f      	movs	r2, #15
 800117e:	409a      	lsls	r2, r3
 8001180:	0013      	movs	r3, r2
 8001182:	43da      	mvns	r2, r3
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	4013      	ands	r3, r2
 8001188:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	691a      	ldr	r2, [r3, #16]
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	2107      	movs	r1, #7
 8001192:	400b      	ands	r3, r1
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	409a      	lsls	r2, r3
 8001198:	0013      	movs	r3, r2
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	4313      	orrs	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	08da      	lsrs	r2, r3, #3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3208      	adds	r2, #8
 80011a8:	0092      	lsls	r2, r2, #2
 80011aa:	6939      	ldr	r1, [r7, #16]
 80011ac:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	2203      	movs	r2, #3
 80011ba:	409a      	lsls	r2, r3
 80011bc:	0013      	movs	r3, r2
 80011be:	43da      	mvns	r2, r3
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	4013      	ands	r3, r2
 80011c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	2203      	movs	r2, #3
 80011cc:	401a      	ands	r2, r3
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	409a      	lsls	r2, r3
 80011d4:	0013      	movs	r3, r2
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	4313      	orrs	r3, r2
 80011da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685a      	ldr	r2, [r3, #4]
 80011e6:	23c0      	movs	r3, #192	; 0xc0
 80011e8:	029b      	lsls	r3, r3, #10
 80011ea:	4013      	ands	r3, r2
 80011ec:	d100      	bne.n	80011f0 <HAL_GPIO_Init+0x174>
 80011ee:	e092      	b.n	8001316 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80011f0:	4a50      	ldr	r2, [pc, #320]	; (8001334 <HAL_GPIO_Init+0x2b8>)
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	089b      	lsrs	r3, r3, #2
 80011f6:	3318      	adds	r3, #24
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	589b      	ldr	r3, [r3, r2]
 80011fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	2203      	movs	r2, #3
 8001202:	4013      	ands	r3, r2
 8001204:	00db      	lsls	r3, r3, #3
 8001206:	220f      	movs	r2, #15
 8001208:	409a      	lsls	r2, r3
 800120a:	0013      	movs	r3, r2
 800120c:	43da      	mvns	r2, r3
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	4013      	ands	r3, r2
 8001212:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001214:	687a      	ldr	r2, [r7, #4]
 8001216:	23a0      	movs	r3, #160	; 0xa0
 8001218:	05db      	lsls	r3, r3, #23
 800121a:	429a      	cmp	r2, r3
 800121c:	d013      	beq.n	8001246 <HAL_GPIO_Init+0x1ca>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a45      	ldr	r2, [pc, #276]	; (8001338 <HAL_GPIO_Init+0x2bc>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d00d      	beq.n	8001242 <HAL_GPIO_Init+0x1c6>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a44      	ldr	r2, [pc, #272]	; (800133c <HAL_GPIO_Init+0x2c0>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d007      	beq.n	800123e <HAL_GPIO_Init+0x1c2>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a43      	ldr	r2, [pc, #268]	; (8001340 <HAL_GPIO_Init+0x2c4>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d101      	bne.n	800123a <HAL_GPIO_Init+0x1be>
 8001236:	2303      	movs	r3, #3
 8001238:	e006      	b.n	8001248 <HAL_GPIO_Init+0x1cc>
 800123a:	2305      	movs	r3, #5
 800123c:	e004      	b.n	8001248 <HAL_GPIO_Init+0x1cc>
 800123e:	2302      	movs	r3, #2
 8001240:	e002      	b.n	8001248 <HAL_GPIO_Init+0x1cc>
 8001242:	2301      	movs	r3, #1
 8001244:	e000      	b.n	8001248 <HAL_GPIO_Init+0x1cc>
 8001246:	2300      	movs	r3, #0
 8001248:	697a      	ldr	r2, [r7, #20]
 800124a:	2103      	movs	r1, #3
 800124c:	400a      	ands	r2, r1
 800124e:	00d2      	lsls	r2, r2, #3
 8001250:	4093      	lsls	r3, r2
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	4313      	orrs	r3, r2
 8001256:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001258:	4936      	ldr	r1, [pc, #216]	; (8001334 <HAL_GPIO_Init+0x2b8>)
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	089b      	lsrs	r3, r3, #2
 800125e:	3318      	adds	r3, #24
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001266:	4b33      	ldr	r3, [pc, #204]	; (8001334 <HAL_GPIO_Init+0x2b8>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	43da      	mvns	r2, r3
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	4013      	ands	r3, r2
 8001274:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685a      	ldr	r2, [r3, #4]
 800127a:	2380      	movs	r3, #128	; 0x80
 800127c:	035b      	lsls	r3, r3, #13
 800127e:	4013      	ands	r3, r2
 8001280:	d003      	beq.n	800128a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	4313      	orrs	r3, r2
 8001288:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800128a:	4b2a      	ldr	r3, [pc, #168]	; (8001334 <HAL_GPIO_Init+0x2b8>)
 800128c:	693a      	ldr	r2, [r7, #16]
 800128e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001290:	4b28      	ldr	r3, [pc, #160]	; (8001334 <HAL_GPIO_Init+0x2b8>)
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	43da      	mvns	r2, r3
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	4013      	ands	r3, r2
 800129e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685a      	ldr	r2, [r3, #4]
 80012a4:	2380      	movs	r3, #128	; 0x80
 80012a6:	039b      	lsls	r3, r3, #14
 80012a8:	4013      	ands	r3, r2
 80012aa:	d003      	beq.n	80012b4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012b4:	4b1f      	ldr	r3, [pc, #124]	; (8001334 <HAL_GPIO_Init+0x2b8>)
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80012ba:	4a1e      	ldr	r2, [pc, #120]	; (8001334 <HAL_GPIO_Init+0x2b8>)
 80012bc:	2384      	movs	r3, #132	; 0x84
 80012be:	58d3      	ldr	r3, [r2, r3]
 80012c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	43da      	mvns	r2, r3
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	4013      	ands	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685a      	ldr	r2, [r3, #4]
 80012d0:	2380      	movs	r3, #128	; 0x80
 80012d2:	029b      	lsls	r3, r3, #10
 80012d4:	4013      	ands	r3, r2
 80012d6:	d003      	beq.n	80012e0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	4313      	orrs	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012e0:	4914      	ldr	r1, [pc, #80]	; (8001334 <HAL_GPIO_Init+0x2b8>)
 80012e2:	2284      	movs	r2, #132	; 0x84
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80012e8:	4a12      	ldr	r2, [pc, #72]	; (8001334 <HAL_GPIO_Init+0x2b8>)
 80012ea:	2380      	movs	r3, #128	; 0x80
 80012ec:	58d3      	ldr	r3, [r2, r3]
 80012ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	43da      	mvns	r2, r3
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	4013      	ands	r3, r2
 80012f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685a      	ldr	r2, [r3, #4]
 80012fe:	2380      	movs	r3, #128	; 0x80
 8001300:	025b      	lsls	r3, r3, #9
 8001302:	4013      	ands	r3, r2
 8001304:	d003      	beq.n	800130e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	4313      	orrs	r3, r2
 800130c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800130e:	4909      	ldr	r1, [pc, #36]	; (8001334 <HAL_GPIO_Init+0x2b8>)
 8001310:	2280      	movs	r2, #128	; 0x80
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	3301      	adds	r3, #1
 800131a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	40da      	lsrs	r2, r3
 8001324:	1e13      	subs	r3, r2, #0
 8001326:	d000      	beq.n	800132a <HAL_GPIO_Init+0x2ae>
 8001328:	e6b0      	b.n	800108c <HAL_GPIO_Init+0x10>
  }
}
 800132a:	46c0      	nop			; (mov r8, r8)
 800132c:	46c0      	nop			; (mov r8, r8)
 800132e:	46bd      	mov	sp, r7
 8001330:	b006      	add	sp, #24
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40021800 	.word	0x40021800
 8001338:	50000400 	.word	0x50000400
 800133c:	50000800 	.word	0x50000800
 8001340:	50000c00 	.word	0x50000c00

08001344 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	0008      	movs	r0, r1
 800134e:	0011      	movs	r1, r2
 8001350:	1cbb      	adds	r3, r7, #2
 8001352:	1c02      	adds	r2, r0, #0
 8001354:	801a      	strh	r2, [r3, #0]
 8001356:	1c7b      	adds	r3, r7, #1
 8001358:	1c0a      	adds	r2, r1, #0
 800135a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800135c:	1c7b      	adds	r3, r7, #1
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d004      	beq.n	800136e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001364:	1cbb      	adds	r3, r7, #2
 8001366:	881a      	ldrh	r2, [r3, #0]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800136c:	e003      	b.n	8001376 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800136e:	1cbb      	adds	r3, r7, #2
 8001370:	881a      	ldrh	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001376:	46c0      	nop			; (mov r8, r8)
 8001378:	46bd      	mov	sp, r7
 800137a:	b002      	add	sp, #8
 800137c:	bd80      	pop	{r7, pc}
	...

08001380 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	0002      	movs	r2, r0
 8001388:	1dbb      	adds	r3, r7, #6
 800138a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 800138c:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	1dba      	adds	r2, r7, #6
 8001392:	8812      	ldrh	r2, [r2, #0]
 8001394:	4013      	ands	r3, r2
 8001396:	d008      	beq.n	80013aa <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8001398:	4b0d      	ldr	r3, [pc, #52]	; (80013d0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800139a:	1dba      	adds	r2, r7, #6
 800139c:	8812      	ldrh	r2, [r2, #0]
 800139e:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80013a0:	1dbb      	adds	r3, r7, #6
 80013a2:	881b      	ldrh	r3, [r3, #0]
 80013a4:	0018      	movs	r0, r3
 80013a6:	f000 f815 	bl	80013d4 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80013aa:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80013ac:	691b      	ldr	r3, [r3, #16]
 80013ae:	1dba      	adds	r2, r7, #6
 80013b0:	8812      	ldrh	r2, [r2, #0]
 80013b2:	4013      	ands	r3, r2
 80013b4:	d008      	beq.n	80013c8 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80013b6:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80013b8:	1dba      	adds	r2, r7, #6
 80013ba:	8812      	ldrh	r2, [r2, #0]
 80013bc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80013be:	1dbb      	adds	r3, r7, #6
 80013c0:	881b      	ldrh	r3, [r3, #0]
 80013c2:	0018      	movs	r0, r3
 80013c4:	f000 f810 	bl	80013e8 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80013c8:	46c0      	nop			; (mov r8, r8)
 80013ca:	46bd      	mov	sp, r7
 80013cc:	b002      	add	sp, #8
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40021800 	.word	0x40021800

080013d4 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	0002      	movs	r2, r0
 80013dc:	1dbb      	adds	r3, r7, #6
 80013de:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80013e0:	46c0      	nop			; (mov r8, r8)
 80013e2:	46bd      	mov	sp, r7
 80013e4:	b002      	add	sp, #8
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	0002      	movs	r2, r0
 80013f0:	1dbb      	adds	r3, r7, #6
 80013f2:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80013f4:	46c0      	nop			; (mov r8, r8)
 80013f6:	46bd      	mov	sp, r7
 80013f8:	b002      	add	sp, #8
 80013fa:	bd80      	pop	{r7, pc}

080013fc <HAL_PWR_EnterSLEEPMode>:
  * @note   When WFI entry is used, tick interrupt have to be disabled if not
  *         desired as the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	000a      	movs	r2, r1
 8001406:	1cfb      	adds	r3, r7, #3
 8001408:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator != PWR_MAINREGULATOR_ON)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d008      	beq.n	8001422 <HAL_PWR_EnterSLEEPMode+0x26>
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if ((PWR->SR2 & PWR_SR2_REGLPF) == 0x00u)
 8001410:	4b13      	ldr	r3, [pc, #76]	; (8001460 <HAL_PWR_EnterSLEEPMode+0x64>)
 8001412:	695a      	ldr	r2, [r3, #20]
 8001414:	2380      	movs	r3, #128	; 0x80
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	4013      	ands	r3, r2
 800141a:	d10c      	bne.n	8001436 <HAL_PWR_EnterSLEEPMode+0x3a>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 800141c:	f000 f864 	bl	80014e8 <HAL_PWREx_EnableLowPowerRunMode>
 8001420:	e009      	b.n	8001436 <HAL_PWR_EnterSLEEPMode+0x3a>
    }
  }
  else
  {
    /* If in low-power run mode at this point, exit it */
    if ((PWR->SR2 & PWR_SR2_REGLPF) != 0x00u)
 8001422:	4b0f      	ldr	r3, [pc, #60]	; (8001460 <HAL_PWR_EnterSLEEPMode+0x64>)
 8001424:	695a      	ldr	r2, [r3, #20]
 8001426:	2380      	movs	r3, #128	; 0x80
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	4013      	ands	r3, r2
 800142c:	d003      	beq.n	8001436 <HAL_PWR_EnterSLEEPMode+0x3a>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 800142e:	f000 f869 	bl	8001504 <HAL_PWREx_DisableLowPowerRunMode>
 8001432:	1e03      	subs	r3, r0, #0
 8001434:	d10f      	bne.n	8001456 <HAL_PWR_EnterSLEEPMode+0x5a>
      }
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001436:	4b0b      	ldr	r3, [pc, #44]	; (8001464 <HAL_PWR_EnterSLEEPMode+0x68>)
 8001438:	691a      	ldr	r2, [r3, #16]
 800143a:	4b0a      	ldr	r3, [pc, #40]	; (8001464 <HAL_PWR_EnterSLEEPMode+0x68>)
 800143c:	2104      	movs	r1, #4
 800143e:	438a      	bics	r2, r1
 8001440:	611a      	str	r2, [r3, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8001442:	1cfb      	adds	r3, r7, #3
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d101      	bne.n	800144e <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800144a:	bf30      	wfi
 800144c:	e004      	b.n	8001458 <HAL_PWR_EnterSLEEPMode+0x5c>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800144e:	bf40      	sev
    __WFE();
 8001450:	bf20      	wfe
    __WFE();
 8001452:	bf20      	wfe
 8001454:	e000      	b.n	8001458 <HAL_PWR_EnterSLEEPMode+0x5c>
        return ;
 8001456:	46c0      	nop			; (mov r8, r8)
  }
}
 8001458:	46bd      	mov	sp, r7
 800145a:	b002      	add	sp, #8
 800145c:	bd80      	pop	{r7, pc}
 800145e:	46c0      	nop			; (mov r8, r8)
 8001460:	40007000 	.word	0x40007000
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001470:	4b19      	ldr	r3, [pc, #100]	; (80014d8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a19      	ldr	r2, [pc, #100]	; (80014dc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001476:	4013      	ands	r3, r2
 8001478:	0019      	movs	r1, r3
 800147a:	4b17      	ldr	r3, [pc, #92]	; (80014d8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	430a      	orrs	r2, r1
 8001480:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	2380      	movs	r3, #128	; 0x80
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	429a      	cmp	r2, r3
 800148a:	d11f      	bne.n	80014cc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800148c:	4b14      	ldr	r3, [pc, #80]	; (80014e0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	0013      	movs	r3, r2
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	189b      	adds	r3, r3, r2
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	4912      	ldr	r1, [pc, #72]	; (80014e4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800149a:	0018      	movs	r0, r3
 800149c:	f7fe fe0c 	bl	80000b8 <__udivsi3>
 80014a0:	0003      	movs	r3, r0
 80014a2:	3301      	adds	r3, #1
 80014a4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014a6:	e008      	b.n	80014ba <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d003      	beq.n	80014b6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	3b01      	subs	r3, #1
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	e001      	b.n	80014ba <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e009      	b.n	80014ce <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014ba:	4b07      	ldr	r3, [pc, #28]	; (80014d8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80014bc:	695a      	ldr	r2, [r3, #20]
 80014be:	2380      	movs	r3, #128	; 0x80
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	401a      	ands	r2, r3
 80014c4:	2380      	movs	r3, #128	; 0x80
 80014c6:	00db      	lsls	r3, r3, #3
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d0ed      	beq.n	80014a8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	0018      	movs	r0, r3
 80014d0:	46bd      	mov	sp, r7
 80014d2:	b004      	add	sp, #16
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	46c0      	nop			; (mov r8, r8)
 80014d8:	40007000 	.word	0x40007000
 80014dc:	fffff9ff 	.word	0xfffff9ff
 80014e0:	20000004 	.word	0x20000004
 80014e4:	000f4240 	.word	0x000f4240

080014e8 <HAL_PWREx_EnableLowPowerRunMode>:
  *        low power run mode
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 80014ec:	4b04      	ldr	r3, [pc, #16]	; (8001500 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	4b03      	ldr	r3, [pc, #12]	; (8001500 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80014f2:	2180      	movs	r1, #128	; 0x80
 80014f4:	01c9      	lsls	r1, r1, #7
 80014f6:	430a      	orrs	r2, r1
 80014f8:	601a      	str	r2, [r3, #0]
}
 80014fa:	46c0      	nop			; (mov r8, r8)
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40007000 	.word	0x40007000

08001504 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index = ((PWR_REGLPF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800150a:	4b15      	ldr	r3, [pc, #84]	; (8001560 <HAL_PWREx_DisableLowPowerRunMode+0x5c>)
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	0013      	movs	r3, r2
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	189b      	adds	r3, r3, r2
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	4913      	ldr	r1, [pc, #76]	; (8001564 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8001518:	0018      	movs	r0, r3
 800151a:	f7fe fdcd 	bl	80000b8 <__udivsi3>
 800151e:	0003      	movs	r3, r0
 8001520:	3301      	adds	r3, #1
 8001522:	607b      	str	r3, [r7, #4]

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8001524:	4b10      	ldr	r3, [pc, #64]	; (8001568 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800152a:	4910      	ldr	r1, [pc, #64]	; (800156c <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 800152c:	400a      	ands	r2, r1
 800152e:	601a      	str	r2, [r3, #0]

  /* Wait until REGLPF is reset */
  while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8001530:	e008      	b.n	8001544 <HAL_PWREx_DisableLowPowerRunMode+0x40>
  {
    if (wait_loop_index != 0U)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d003      	beq.n	8001540 <HAL_PWREx_DisableLowPowerRunMode+0x3c>
    {
      wait_loop_index--;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3b01      	subs	r3, #1
 800153c:	607b      	str	r3, [r7, #4]
 800153e:	e001      	b.n	8001544 <HAL_PWREx_DisableLowPowerRunMode+0x40>
    }
    else
    {
      return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	e009      	b.n	8001558 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8001544:	4b08      	ldr	r3, [pc, #32]	; (8001568 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8001546:	695a      	ldr	r2, [r3, #20]
 8001548:	2380      	movs	r3, #128	; 0x80
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	401a      	ands	r2, r3
 800154e:	2380      	movs	r3, #128	; 0x80
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	429a      	cmp	r2, r3
 8001554:	d0ed      	beq.n	8001532 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
    }
  }

  return HAL_OK;
 8001556:	2300      	movs	r3, #0
}
 8001558:	0018      	movs	r0, r3
 800155a:	46bd      	mov	sp, r7
 800155c:	b002      	add	sp, #8
 800155e:	bd80      	pop	{r7, pc}
 8001560:	20000004 	.word	0x20000004
 8001564:	000f4240 	.word	0x000f4240
 8001568:	40007000 	.word	0x40007000
 800156c:	ffffbfff 	.word	0xffffbfff

08001570 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b088      	sub	sp, #32
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d101      	bne.n	8001582 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e2f3      	b.n	8001b6a <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2201      	movs	r2, #1
 8001588:	4013      	ands	r3, r2
 800158a:	d100      	bne.n	800158e <HAL_RCC_OscConfig+0x1e>
 800158c:	e07c      	b.n	8001688 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800158e:	4bc3      	ldr	r3, [pc, #780]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	2238      	movs	r2, #56	; 0x38
 8001594:	4013      	ands	r3, r2
 8001596:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001598:	4bc0      	ldr	r3, [pc, #768]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	2203      	movs	r2, #3
 800159e:	4013      	ands	r3, r2
 80015a0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	2b10      	cmp	r3, #16
 80015a6:	d102      	bne.n	80015ae <HAL_RCC_OscConfig+0x3e>
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	2b03      	cmp	r3, #3
 80015ac:	d002      	beq.n	80015b4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	2b08      	cmp	r3, #8
 80015b2:	d10b      	bne.n	80015cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015b4:	4bb9      	ldr	r3, [pc, #740]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	2380      	movs	r3, #128	; 0x80
 80015ba:	029b      	lsls	r3, r3, #10
 80015bc:	4013      	ands	r3, r2
 80015be:	d062      	beq.n	8001686 <HAL_RCC_OscConfig+0x116>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d15e      	bne.n	8001686 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e2ce      	b.n	8001b6a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685a      	ldr	r2, [r3, #4]
 80015d0:	2380      	movs	r3, #128	; 0x80
 80015d2:	025b      	lsls	r3, r3, #9
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d107      	bne.n	80015e8 <HAL_RCC_OscConfig+0x78>
 80015d8:	4bb0      	ldr	r3, [pc, #704]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	4baf      	ldr	r3, [pc, #700]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 80015de:	2180      	movs	r1, #128	; 0x80
 80015e0:	0249      	lsls	r1, r1, #9
 80015e2:	430a      	orrs	r2, r1
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	e020      	b.n	800162a <HAL_RCC_OscConfig+0xba>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685a      	ldr	r2, [r3, #4]
 80015ec:	23a0      	movs	r3, #160	; 0xa0
 80015ee:	02db      	lsls	r3, r3, #11
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d10e      	bne.n	8001612 <HAL_RCC_OscConfig+0xa2>
 80015f4:	4ba9      	ldr	r3, [pc, #676]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	4ba8      	ldr	r3, [pc, #672]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 80015fa:	2180      	movs	r1, #128	; 0x80
 80015fc:	02c9      	lsls	r1, r1, #11
 80015fe:	430a      	orrs	r2, r1
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	4ba6      	ldr	r3, [pc, #664]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	4ba5      	ldr	r3, [pc, #660]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 8001608:	2180      	movs	r1, #128	; 0x80
 800160a:	0249      	lsls	r1, r1, #9
 800160c:	430a      	orrs	r2, r1
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	e00b      	b.n	800162a <HAL_RCC_OscConfig+0xba>
 8001612:	4ba2      	ldr	r3, [pc, #648]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	4ba1      	ldr	r3, [pc, #644]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 8001618:	49a1      	ldr	r1, [pc, #644]	; (80018a0 <HAL_RCC_OscConfig+0x330>)
 800161a:	400a      	ands	r2, r1
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	4b9f      	ldr	r3, [pc, #636]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	4b9e      	ldr	r3, [pc, #632]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 8001624:	499f      	ldr	r1, [pc, #636]	; (80018a4 <HAL_RCC_OscConfig+0x334>)
 8001626:	400a      	ands	r2, r1
 8001628:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d014      	beq.n	800165c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001632:	f7ff fc17 	bl	8000e64 <HAL_GetTick>
 8001636:	0003      	movs	r3, r0
 8001638:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800163c:	f7ff fc12 	bl	8000e64 <HAL_GetTick>
 8001640:	0002      	movs	r2, r0
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b64      	cmp	r3, #100	; 0x64
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e28d      	b.n	8001b6a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800164e:	4b93      	ldr	r3, [pc, #588]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	2380      	movs	r3, #128	; 0x80
 8001654:	029b      	lsls	r3, r3, #10
 8001656:	4013      	ands	r3, r2
 8001658:	d0f0      	beq.n	800163c <HAL_RCC_OscConfig+0xcc>
 800165a:	e015      	b.n	8001688 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800165c:	f7ff fc02 	bl	8000e64 <HAL_GetTick>
 8001660:	0003      	movs	r3, r0
 8001662:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001664:	e008      	b.n	8001678 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001666:	f7ff fbfd 	bl	8000e64 <HAL_GetTick>
 800166a:	0002      	movs	r2, r0
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	2b64      	cmp	r3, #100	; 0x64
 8001672:	d901      	bls.n	8001678 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e278      	b.n	8001b6a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001678:	4b88      	ldr	r3, [pc, #544]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	2380      	movs	r3, #128	; 0x80
 800167e:	029b      	lsls	r3, r3, #10
 8001680:	4013      	ands	r3, r2
 8001682:	d1f0      	bne.n	8001666 <HAL_RCC_OscConfig+0xf6>
 8001684:	e000      	b.n	8001688 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001686:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2202      	movs	r2, #2
 800168e:	4013      	ands	r3, r2
 8001690:	d100      	bne.n	8001694 <HAL_RCC_OscConfig+0x124>
 8001692:	e099      	b.n	80017c8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001694:	4b81      	ldr	r3, [pc, #516]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	2238      	movs	r2, #56	; 0x38
 800169a:	4013      	ands	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800169e:	4b7f      	ldr	r3, [pc, #508]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	2203      	movs	r2, #3
 80016a4:	4013      	ands	r3, r2
 80016a6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	2b10      	cmp	r3, #16
 80016ac:	d102      	bne.n	80016b4 <HAL_RCC_OscConfig+0x144>
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d002      	beq.n	80016ba <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d135      	bne.n	8001726 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016ba:	4b78      	ldr	r3, [pc, #480]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	2380      	movs	r3, #128	; 0x80
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	4013      	ands	r3, r2
 80016c4:	d005      	beq.n	80016d2 <HAL_RCC_OscConfig+0x162>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d101      	bne.n	80016d2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e24b      	b.n	8001b6a <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016d2:	4b72      	ldr	r3, [pc, #456]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	4a74      	ldr	r2, [pc, #464]	; (80018a8 <HAL_RCC_OscConfig+0x338>)
 80016d8:	4013      	ands	r3, r2
 80016da:	0019      	movs	r1, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	695b      	ldr	r3, [r3, #20]
 80016e0:	021a      	lsls	r2, r3, #8
 80016e2:	4b6e      	ldr	r3, [pc, #440]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 80016e4:	430a      	orrs	r2, r1
 80016e6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d112      	bne.n	8001714 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80016ee:	4b6b      	ldr	r3, [pc, #428]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a6e      	ldr	r2, [pc, #440]	; (80018ac <HAL_RCC_OscConfig+0x33c>)
 80016f4:	4013      	ands	r3, r2
 80016f6:	0019      	movs	r1, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	691a      	ldr	r2, [r3, #16]
 80016fc:	4b67      	ldr	r3, [pc, #412]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 80016fe:	430a      	orrs	r2, r1
 8001700:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001702:	4b66      	ldr	r3, [pc, #408]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	0adb      	lsrs	r3, r3, #11
 8001708:	2207      	movs	r2, #7
 800170a:	4013      	ands	r3, r2
 800170c:	4a68      	ldr	r2, [pc, #416]	; (80018b0 <HAL_RCC_OscConfig+0x340>)
 800170e:	40da      	lsrs	r2, r3
 8001710:	4b68      	ldr	r3, [pc, #416]	; (80018b4 <HAL_RCC_OscConfig+0x344>)
 8001712:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001714:	4b68      	ldr	r3, [pc, #416]	; (80018b8 <HAL_RCC_OscConfig+0x348>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	0018      	movs	r0, r3
 800171a:	f7ff fb47 	bl	8000dac <HAL_InitTick>
 800171e:	1e03      	subs	r3, r0, #0
 8001720:	d051      	beq.n	80017c6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e221      	b.n	8001b6a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	68db      	ldr	r3, [r3, #12]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d030      	beq.n	8001790 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800172e:	4b5b      	ldr	r3, [pc, #364]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a5e      	ldr	r2, [pc, #376]	; (80018ac <HAL_RCC_OscConfig+0x33c>)
 8001734:	4013      	ands	r3, r2
 8001736:	0019      	movs	r1, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	691a      	ldr	r2, [r3, #16]
 800173c:	4b57      	ldr	r3, [pc, #348]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 800173e:	430a      	orrs	r2, r1
 8001740:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001742:	4b56      	ldr	r3, [pc, #344]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	4b55      	ldr	r3, [pc, #340]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 8001748:	2180      	movs	r1, #128	; 0x80
 800174a:	0049      	lsls	r1, r1, #1
 800174c:	430a      	orrs	r2, r1
 800174e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001750:	f7ff fb88 	bl	8000e64 <HAL_GetTick>
 8001754:	0003      	movs	r3, r0
 8001756:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001758:	e008      	b.n	800176c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800175a:	f7ff fb83 	bl	8000e64 <HAL_GetTick>
 800175e:	0002      	movs	r2, r0
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	2b02      	cmp	r3, #2
 8001766:	d901      	bls.n	800176c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e1fe      	b.n	8001b6a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800176c:	4b4b      	ldr	r3, [pc, #300]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	2380      	movs	r3, #128	; 0x80
 8001772:	00db      	lsls	r3, r3, #3
 8001774:	4013      	ands	r3, r2
 8001776:	d0f0      	beq.n	800175a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001778:	4b48      	ldr	r3, [pc, #288]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	4a4a      	ldr	r2, [pc, #296]	; (80018a8 <HAL_RCC_OscConfig+0x338>)
 800177e:	4013      	ands	r3, r2
 8001780:	0019      	movs	r1, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	695b      	ldr	r3, [r3, #20]
 8001786:	021a      	lsls	r2, r3, #8
 8001788:	4b44      	ldr	r3, [pc, #272]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 800178a:	430a      	orrs	r2, r1
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	e01b      	b.n	80017c8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001790:	4b42      	ldr	r3, [pc, #264]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	4b41      	ldr	r3, [pc, #260]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 8001796:	4949      	ldr	r1, [pc, #292]	; (80018bc <HAL_RCC_OscConfig+0x34c>)
 8001798:	400a      	ands	r2, r1
 800179a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800179c:	f7ff fb62 	bl	8000e64 <HAL_GetTick>
 80017a0:	0003      	movs	r3, r0
 80017a2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017a4:	e008      	b.n	80017b8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017a6:	f7ff fb5d 	bl	8000e64 <HAL_GetTick>
 80017aa:	0002      	movs	r2, r0
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d901      	bls.n	80017b8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e1d8      	b.n	8001b6a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017b8:	4b38      	ldr	r3, [pc, #224]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	2380      	movs	r3, #128	; 0x80
 80017be:	00db      	lsls	r3, r3, #3
 80017c0:	4013      	ands	r3, r2
 80017c2:	d1f0      	bne.n	80017a6 <HAL_RCC_OscConfig+0x236>
 80017c4:	e000      	b.n	80017c8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017c6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2208      	movs	r2, #8
 80017ce:	4013      	ands	r3, r2
 80017d0:	d047      	beq.n	8001862 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80017d2:	4b32      	ldr	r3, [pc, #200]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	2238      	movs	r2, #56	; 0x38
 80017d8:	4013      	ands	r3, r2
 80017da:	2b18      	cmp	r3, #24
 80017dc:	d10a      	bne.n	80017f4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80017de:	4b2f      	ldr	r3, [pc, #188]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 80017e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017e2:	2202      	movs	r2, #2
 80017e4:	4013      	ands	r3, r2
 80017e6:	d03c      	beq.n	8001862 <HAL_RCC_OscConfig+0x2f2>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d138      	bne.n	8001862 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e1ba      	b.n	8001b6a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d019      	beq.n	8001830 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80017fc:	4b27      	ldr	r3, [pc, #156]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 80017fe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001800:	4b26      	ldr	r3, [pc, #152]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 8001802:	2101      	movs	r1, #1
 8001804:	430a      	orrs	r2, r1
 8001806:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001808:	f7ff fb2c 	bl	8000e64 <HAL_GetTick>
 800180c:	0003      	movs	r3, r0
 800180e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001810:	e008      	b.n	8001824 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001812:	f7ff fb27 	bl	8000e64 <HAL_GetTick>
 8001816:	0002      	movs	r2, r0
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	2b02      	cmp	r3, #2
 800181e:	d901      	bls.n	8001824 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	e1a2      	b.n	8001b6a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001824:	4b1d      	ldr	r3, [pc, #116]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 8001826:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001828:	2202      	movs	r2, #2
 800182a:	4013      	ands	r3, r2
 800182c:	d0f1      	beq.n	8001812 <HAL_RCC_OscConfig+0x2a2>
 800182e:	e018      	b.n	8001862 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001830:	4b1a      	ldr	r3, [pc, #104]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 8001832:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001834:	4b19      	ldr	r3, [pc, #100]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 8001836:	2101      	movs	r1, #1
 8001838:	438a      	bics	r2, r1
 800183a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800183c:	f7ff fb12 	bl	8000e64 <HAL_GetTick>
 8001840:	0003      	movs	r3, r0
 8001842:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001844:	e008      	b.n	8001858 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001846:	f7ff fb0d 	bl	8000e64 <HAL_GetTick>
 800184a:	0002      	movs	r2, r0
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	2b02      	cmp	r3, #2
 8001852:	d901      	bls.n	8001858 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e188      	b.n	8001b6a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001858:	4b10      	ldr	r3, [pc, #64]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 800185a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800185c:	2202      	movs	r2, #2
 800185e:	4013      	ands	r3, r2
 8001860:	d1f1      	bne.n	8001846 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2204      	movs	r2, #4
 8001868:	4013      	ands	r3, r2
 800186a:	d100      	bne.n	800186e <HAL_RCC_OscConfig+0x2fe>
 800186c:	e0c6      	b.n	80019fc <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800186e:	231f      	movs	r3, #31
 8001870:	18fb      	adds	r3, r7, r3
 8001872:	2200      	movs	r2, #0
 8001874:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001876:	4b09      	ldr	r3, [pc, #36]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	2238      	movs	r2, #56	; 0x38
 800187c:	4013      	ands	r3, r2
 800187e:	2b20      	cmp	r3, #32
 8001880:	d11e      	bne.n	80018c0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001882:	4b06      	ldr	r3, [pc, #24]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 8001884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001886:	2202      	movs	r2, #2
 8001888:	4013      	ands	r3, r2
 800188a:	d100      	bne.n	800188e <HAL_RCC_OscConfig+0x31e>
 800188c:	e0b6      	b.n	80019fc <HAL_RCC_OscConfig+0x48c>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d000      	beq.n	8001898 <HAL_RCC_OscConfig+0x328>
 8001896:	e0b1      	b.n	80019fc <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e166      	b.n	8001b6a <HAL_RCC_OscConfig+0x5fa>
 800189c:	40021000 	.word	0x40021000
 80018a0:	fffeffff 	.word	0xfffeffff
 80018a4:	fffbffff 	.word	0xfffbffff
 80018a8:	ffff80ff 	.word	0xffff80ff
 80018ac:	ffffc7ff 	.word	0xffffc7ff
 80018b0:	00f42400 	.word	0x00f42400
 80018b4:	20000004 	.word	0x20000004
 80018b8:	20000008 	.word	0x20000008
 80018bc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80018c0:	4bac      	ldr	r3, [pc, #688]	; (8001b74 <HAL_RCC_OscConfig+0x604>)
 80018c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80018c4:	2380      	movs	r3, #128	; 0x80
 80018c6:	055b      	lsls	r3, r3, #21
 80018c8:	4013      	ands	r3, r2
 80018ca:	d101      	bne.n	80018d0 <HAL_RCC_OscConfig+0x360>
 80018cc:	2301      	movs	r3, #1
 80018ce:	e000      	b.n	80018d2 <HAL_RCC_OscConfig+0x362>
 80018d0:	2300      	movs	r3, #0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d011      	beq.n	80018fa <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80018d6:	4ba7      	ldr	r3, [pc, #668]	; (8001b74 <HAL_RCC_OscConfig+0x604>)
 80018d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80018da:	4ba6      	ldr	r3, [pc, #664]	; (8001b74 <HAL_RCC_OscConfig+0x604>)
 80018dc:	2180      	movs	r1, #128	; 0x80
 80018de:	0549      	lsls	r1, r1, #21
 80018e0:	430a      	orrs	r2, r1
 80018e2:	63da      	str	r2, [r3, #60]	; 0x3c
 80018e4:	4ba3      	ldr	r3, [pc, #652]	; (8001b74 <HAL_RCC_OscConfig+0x604>)
 80018e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80018e8:	2380      	movs	r3, #128	; 0x80
 80018ea:	055b      	lsls	r3, r3, #21
 80018ec:	4013      	ands	r3, r2
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80018f2:	231f      	movs	r3, #31
 80018f4:	18fb      	adds	r3, r7, r3
 80018f6:	2201      	movs	r2, #1
 80018f8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018fa:	4b9f      	ldr	r3, [pc, #636]	; (8001b78 <HAL_RCC_OscConfig+0x608>)
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	2380      	movs	r3, #128	; 0x80
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	4013      	ands	r3, r2
 8001904:	d11a      	bne.n	800193c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001906:	4b9c      	ldr	r3, [pc, #624]	; (8001b78 <HAL_RCC_OscConfig+0x608>)
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	4b9b      	ldr	r3, [pc, #620]	; (8001b78 <HAL_RCC_OscConfig+0x608>)
 800190c:	2180      	movs	r1, #128	; 0x80
 800190e:	0049      	lsls	r1, r1, #1
 8001910:	430a      	orrs	r2, r1
 8001912:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001914:	f7ff faa6 	bl	8000e64 <HAL_GetTick>
 8001918:	0003      	movs	r3, r0
 800191a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800191c:	e008      	b.n	8001930 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800191e:	f7ff faa1 	bl	8000e64 <HAL_GetTick>
 8001922:	0002      	movs	r2, r0
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	2b02      	cmp	r3, #2
 800192a:	d901      	bls.n	8001930 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	e11c      	b.n	8001b6a <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001930:	4b91      	ldr	r3, [pc, #580]	; (8001b78 <HAL_RCC_OscConfig+0x608>)
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	2380      	movs	r3, #128	; 0x80
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	4013      	ands	r3, r2
 800193a:	d0f0      	beq.n	800191e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d106      	bne.n	8001952 <HAL_RCC_OscConfig+0x3e2>
 8001944:	4b8b      	ldr	r3, [pc, #556]	; (8001b74 <HAL_RCC_OscConfig+0x604>)
 8001946:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001948:	4b8a      	ldr	r3, [pc, #552]	; (8001b74 <HAL_RCC_OscConfig+0x604>)
 800194a:	2101      	movs	r1, #1
 800194c:	430a      	orrs	r2, r1
 800194e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001950:	e01c      	b.n	800198c <HAL_RCC_OscConfig+0x41c>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	2b05      	cmp	r3, #5
 8001958:	d10c      	bne.n	8001974 <HAL_RCC_OscConfig+0x404>
 800195a:	4b86      	ldr	r3, [pc, #536]	; (8001b74 <HAL_RCC_OscConfig+0x604>)
 800195c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800195e:	4b85      	ldr	r3, [pc, #532]	; (8001b74 <HAL_RCC_OscConfig+0x604>)
 8001960:	2104      	movs	r1, #4
 8001962:	430a      	orrs	r2, r1
 8001964:	65da      	str	r2, [r3, #92]	; 0x5c
 8001966:	4b83      	ldr	r3, [pc, #524]	; (8001b74 <HAL_RCC_OscConfig+0x604>)
 8001968:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800196a:	4b82      	ldr	r3, [pc, #520]	; (8001b74 <HAL_RCC_OscConfig+0x604>)
 800196c:	2101      	movs	r1, #1
 800196e:	430a      	orrs	r2, r1
 8001970:	65da      	str	r2, [r3, #92]	; 0x5c
 8001972:	e00b      	b.n	800198c <HAL_RCC_OscConfig+0x41c>
 8001974:	4b7f      	ldr	r3, [pc, #508]	; (8001b74 <HAL_RCC_OscConfig+0x604>)
 8001976:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001978:	4b7e      	ldr	r3, [pc, #504]	; (8001b74 <HAL_RCC_OscConfig+0x604>)
 800197a:	2101      	movs	r1, #1
 800197c:	438a      	bics	r2, r1
 800197e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001980:	4b7c      	ldr	r3, [pc, #496]	; (8001b74 <HAL_RCC_OscConfig+0x604>)
 8001982:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001984:	4b7b      	ldr	r3, [pc, #492]	; (8001b74 <HAL_RCC_OscConfig+0x604>)
 8001986:	2104      	movs	r1, #4
 8001988:	438a      	bics	r2, r1
 800198a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d014      	beq.n	80019be <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001994:	f7ff fa66 	bl	8000e64 <HAL_GetTick>
 8001998:	0003      	movs	r3, r0
 800199a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800199c:	e009      	b.n	80019b2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800199e:	f7ff fa61 	bl	8000e64 <HAL_GetTick>
 80019a2:	0002      	movs	r2, r0
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	4a74      	ldr	r2, [pc, #464]	; (8001b7c <HAL_RCC_OscConfig+0x60c>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e0db      	b.n	8001b6a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019b2:	4b70      	ldr	r3, [pc, #448]	; (8001b74 <HAL_RCC_OscConfig+0x604>)
 80019b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019b6:	2202      	movs	r2, #2
 80019b8:	4013      	ands	r3, r2
 80019ba:	d0f0      	beq.n	800199e <HAL_RCC_OscConfig+0x42e>
 80019bc:	e013      	b.n	80019e6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019be:	f7ff fa51 	bl	8000e64 <HAL_GetTick>
 80019c2:	0003      	movs	r3, r0
 80019c4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019c6:	e009      	b.n	80019dc <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019c8:	f7ff fa4c 	bl	8000e64 <HAL_GetTick>
 80019cc:	0002      	movs	r2, r0
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	4a6a      	ldr	r2, [pc, #424]	; (8001b7c <HAL_RCC_OscConfig+0x60c>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d901      	bls.n	80019dc <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e0c6      	b.n	8001b6a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019dc:	4b65      	ldr	r3, [pc, #404]	; (8001b74 <HAL_RCC_OscConfig+0x604>)
 80019de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019e0:	2202      	movs	r2, #2
 80019e2:	4013      	ands	r3, r2
 80019e4:	d1f0      	bne.n	80019c8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80019e6:	231f      	movs	r3, #31
 80019e8:	18fb      	adds	r3, r7, r3
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d105      	bne.n	80019fc <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80019f0:	4b60      	ldr	r3, [pc, #384]	; (8001b74 <HAL_RCC_OscConfig+0x604>)
 80019f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019f4:	4b5f      	ldr	r3, [pc, #380]	; (8001b74 <HAL_RCC_OscConfig+0x604>)
 80019f6:	4962      	ldr	r1, [pc, #392]	; (8001b80 <HAL_RCC_OscConfig+0x610>)
 80019f8:	400a      	ands	r2, r1
 80019fa:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	69db      	ldr	r3, [r3, #28]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d100      	bne.n	8001a06 <HAL_RCC_OscConfig+0x496>
 8001a04:	e0b0      	b.n	8001b68 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a06:	4b5b      	ldr	r3, [pc, #364]	; (8001b74 <HAL_RCC_OscConfig+0x604>)
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	2238      	movs	r2, #56	; 0x38
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	2b10      	cmp	r3, #16
 8001a10:	d100      	bne.n	8001a14 <HAL_RCC_OscConfig+0x4a4>
 8001a12:	e078      	b.n	8001b06 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	69db      	ldr	r3, [r3, #28]
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d153      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a1c:	4b55      	ldr	r3, [pc, #340]	; (8001b74 <HAL_RCC_OscConfig+0x604>)
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	4b54      	ldr	r3, [pc, #336]	; (8001b74 <HAL_RCC_OscConfig+0x604>)
 8001a22:	4958      	ldr	r1, [pc, #352]	; (8001b84 <HAL_RCC_OscConfig+0x614>)
 8001a24:	400a      	ands	r2, r1
 8001a26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a28:	f7ff fa1c 	bl	8000e64 <HAL_GetTick>
 8001a2c:	0003      	movs	r3, r0
 8001a2e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a30:	e008      	b.n	8001a44 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a32:	f7ff fa17 	bl	8000e64 <HAL_GetTick>
 8001a36:	0002      	movs	r2, r0
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e092      	b.n	8001b6a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a44:	4b4b      	ldr	r3, [pc, #300]	; (8001b74 <HAL_RCC_OscConfig+0x604>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	2380      	movs	r3, #128	; 0x80
 8001a4a:	049b      	lsls	r3, r3, #18
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	d1f0      	bne.n	8001a32 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a50:	4b48      	ldr	r3, [pc, #288]	; (8001b74 <HAL_RCC_OscConfig+0x604>)
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	4a4c      	ldr	r2, [pc, #304]	; (8001b88 <HAL_RCC_OscConfig+0x618>)
 8001a56:	4013      	ands	r3, r2
 8001a58:	0019      	movs	r1, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a1a      	ldr	r2, [r3, #32]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a62:	431a      	orrs	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a68:	021b      	lsls	r3, r3, #8
 8001a6a:	431a      	orrs	r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a70:	431a      	orrs	r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	431a      	orrs	r2, r3
 8001a78:	4b3e      	ldr	r3, [pc, #248]	; (8001b74 <HAL_RCC_OscConfig+0x604>)
 8001a7a:	430a      	orrs	r2, r1
 8001a7c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a7e:	4b3d      	ldr	r3, [pc, #244]	; (8001b74 <HAL_RCC_OscConfig+0x604>)
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	4b3c      	ldr	r3, [pc, #240]	; (8001b74 <HAL_RCC_OscConfig+0x604>)
 8001a84:	2180      	movs	r1, #128	; 0x80
 8001a86:	0449      	lsls	r1, r1, #17
 8001a88:	430a      	orrs	r2, r1
 8001a8a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001a8c:	4b39      	ldr	r3, [pc, #228]	; (8001b74 <HAL_RCC_OscConfig+0x604>)
 8001a8e:	68da      	ldr	r2, [r3, #12]
 8001a90:	4b38      	ldr	r3, [pc, #224]	; (8001b74 <HAL_RCC_OscConfig+0x604>)
 8001a92:	2180      	movs	r1, #128	; 0x80
 8001a94:	0549      	lsls	r1, r1, #21
 8001a96:	430a      	orrs	r2, r1
 8001a98:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a9a:	f7ff f9e3 	bl	8000e64 <HAL_GetTick>
 8001a9e:	0003      	movs	r3, r0
 8001aa0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aa2:	e008      	b.n	8001ab6 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aa4:	f7ff f9de 	bl	8000e64 <HAL_GetTick>
 8001aa8:	0002      	movs	r2, r0
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e059      	b.n	8001b6a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ab6:	4b2f      	ldr	r3, [pc, #188]	; (8001b74 <HAL_RCC_OscConfig+0x604>)
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	2380      	movs	r3, #128	; 0x80
 8001abc:	049b      	lsls	r3, r3, #18
 8001abe:	4013      	ands	r3, r2
 8001ac0:	d0f0      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x534>
 8001ac2:	e051      	b.n	8001b68 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ac4:	4b2b      	ldr	r3, [pc, #172]	; (8001b74 <HAL_RCC_OscConfig+0x604>)
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	4b2a      	ldr	r3, [pc, #168]	; (8001b74 <HAL_RCC_OscConfig+0x604>)
 8001aca:	492e      	ldr	r1, [pc, #184]	; (8001b84 <HAL_RCC_OscConfig+0x614>)
 8001acc:	400a      	ands	r2, r1
 8001ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad0:	f7ff f9c8 	bl	8000e64 <HAL_GetTick>
 8001ad4:	0003      	movs	r3, r0
 8001ad6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ad8:	e008      	b.n	8001aec <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ada:	f7ff f9c3 	bl	8000e64 <HAL_GetTick>
 8001ade:	0002      	movs	r2, r0
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d901      	bls.n	8001aec <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e03e      	b.n	8001b6a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aec:	4b21      	ldr	r3, [pc, #132]	; (8001b74 <HAL_RCC_OscConfig+0x604>)
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	2380      	movs	r3, #128	; 0x80
 8001af2:	049b      	lsls	r3, r3, #18
 8001af4:	4013      	ands	r3, r2
 8001af6:	d1f0      	bne.n	8001ada <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001af8:	4b1e      	ldr	r3, [pc, #120]	; (8001b74 <HAL_RCC_OscConfig+0x604>)
 8001afa:	68da      	ldr	r2, [r3, #12]
 8001afc:	4b1d      	ldr	r3, [pc, #116]	; (8001b74 <HAL_RCC_OscConfig+0x604>)
 8001afe:	4923      	ldr	r1, [pc, #140]	; (8001b8c <HAL_RCC_OscConfig+0x61c>)
 8001b00:	400a      	ands	r2, r1
 8001b02:	60da      	str	r2, [r3, #12]
 8001b04:	e030      	b.n	8001b68 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	69db      	ldr	r3, [r3, #28]
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d101      	bne.n	8001b12 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e02b      	b.n	8001b6a <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001b12:	4b18      	ldr	r3, [pc, #96]	; (8001b74 <HAL_RCC_OscConfig+0x604>)
 8001b14:	68db      	ldr	r3, [r3, #12]
 8001b16:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	2203      	movs	r2, #3
 8001b1c:	401a      	ands	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a1b      	ldr	r3, [r3, #32]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d11e      	bne.n	8001b64 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	2270      	movs	r2, #112	; 0x70
 8001b2a:	401a      	ands	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d117      	bne.n	8001b64 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b34:	697a      	ldr	r2, [r7, #20]
 8001b36:	23fe      	movs	r3, #254	; 0xfe
 8001b38:	01db      	lsls	r3, r3, #7
 8001b3a:	401a      	ands	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b40:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d10e      	bne.n	8001b64 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001b46:	697a      	ldr	r2, [r7, #20]
 8001b48:	23f8      	movs	r3, #248	; 0xf8
 8001b4a:	039b      	lsls	r3, r3, #14
 8001b4c:	401a      	ands	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d106      	bne.n	8001b64 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	0f5b      	lsrs	r3, r3, #29
 8001b5a:	075a      	lsls	r2, r3, #29
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d001      	beq.n	8001b68 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e000      	b.n	8001b6a <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	0018      	movs	r0, r3
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	b008      	add	sp, #32
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	46c0      	nop			; (mov r8, r8)
 8001b74:	40021000 	.word	0x40021000
 8001b78:	40007000 	.word	0x40007000
 8001b7c:	00001388 	.word	0x00001388
 8001b80:	efffffff 	.word	0xefffffff
 8001b84:	feffffff 	.word	0xfeffffff
 8001b88:	1fc1808c 	.word	0x1fc1808c
 8001b8c:	effefffc 	.word	0xeffefffc

08001b90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d101      	bne.n	8001ba4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e0e9      	b.n	8001d78 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ba4:	4b76      	ldr	r3, [pc, #472]	; (8001d80 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2207      	movs	r2, #7
 8001baa:	4013      	ands	r3, r2
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d91e      	bls.n	8001bf0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bb2:	4b73      	ldr	r3, [pc, #460]	; (8001d80 <HAL_RCC_ClockConfig+0x1f0>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2207      	movs	r2, #7
 8001bb8:	4393      	bics	r3, r2
 8001bba:	0019      	movs	r1, r3
 8001bbc:	4b70      	ldr	r3, [pc, #448]	; (8001d80 <HAL_RCC_ClockConfig+0x1f0>)
 8001bbe:	683a      	ldr	r2, [r7, #0]
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001bc4:	f7ff f94e 	bl	8000e64 <HAL_GetTick>
 8001bc8:	0003      	movs	r3, r0
 8001bca:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001bcc:	e009      	b.n	8001be2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bce:	f7ff f949 	bl	8000e64 <HAL_GetTick>
 8001bd2:	0002      	movs	r2, r0
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	4a6a      	ldr	r2, [pc, #424]	; (8001d84 <HAL_RCC_ClockConfig+0x1f4>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e0ca      	b.n	8001d78 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001be2:	4b67      	ldr	r3, [pc, #412]	; (8001d80 <HAL_RCC_ClockConfig+0x1f0>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2207      	movs	r2, #7
 8001be8:	4013      	ands	r3, r2
 8001bea:	683a      	ldr	r2, [r7, #0]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d1ee      	bne.n	8001bce <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2202      	movs	r2, #2
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	d015      	beq.n	8001c26 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2204      	movs	r2, #4
 8001c00:	4013      	ands	r3, r2
 8001c02:	d006      	beq.n	8001c12 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001c04:	4b60      	ldr	r3, [pc, #384]	; (8001d88 <HAL_RCC_ClockConfig+0x1f8>)
 8001c06:	689a      	ldr	r2, [r3, #8]
 8001c08:	4b5f      	ldr	r3, [pc, #380]	; (8001d88 <HAL_RCC_ClockConfig+0x1f8>)
 8001c0a:	21e0      	movs	r1, #224	; 0xe0
 8001c0c:	01c9      	lsls	r1, r1, #7
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c12:	4b5d      	ldr	r3, [pc, #372]	; (8001d88 <HAL_RCC_ClockConfig+0x1f8>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	4a5d      	ldr	r2, [pc, #372]	; (8001d8c <HAL_RCC_ClockConfig+0x1fc>)
 8001c18:	4013      	ands	r3, r2
 8001c1a:	0019      	movs	r1, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689a      	ldr	r2, [r3, #8]
 8001c20:	4b59      	ldr	r3, [pc, #356]	; (8001d88 <HAL_RCC_ClockConfig+0x1f8>)
 8001c22:	430a      	orrs	r2, r1
 8001c24:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	d057      	beq.n	8001ce0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d107      	bne.n	8001c48 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c38:	4b53      	ldr	r3, [pc, #332]	; (8001d88 <HAL_RCC_ClockConfig+0x1f8>)
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	2380      	movs	r3, #128	; 0x80
 8001c3e:	029b      	lsls	r3, r3, #10
 8001c40:	4013      	ands	r3, r2
 8001c42:	d12b      	bne.n	8001c9c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e097      	b.n	8001d78 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d107      	bne.n	8001c60 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c50:	4b4d      	ldr	r3, [pc, #308]	; (8001d88 <HAL_RCC_ClockConfig+0x1f8>)
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	2380      	movs	r3, #128	; 0x80
 8001c56:	049b      	lsls	r3, r3, #18
 8001c58:	4013      	ands	r3, r2
 8001c5a:	d11f      	bne.n	8001c9c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e08b      	b.n	8001d78 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d107      	bne.n	8001c78 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c68:	4b47      	ldr	r3, [pc, #284]	; (8001d88 <HAL_RCC_ClockConfig+0x1f8>)
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	2380      	movs	r3, #128	; 0x80
 8001c6e:	00db      	lsls	r3, r3, #3
 8001c70:	4013      	ands	r3, r2
 8001c72:	d113      	bne.n	8001c9c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e07f      	b.n	8001d78 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	2b03      	cmp	r3, #3
 8001c7e:	d106      	bne.n	8001c8e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c80:	4b41      	ldr	r3, [pc, #260]	; (8001d88 <HAL_RCC_ClockConfig+0x1f8>)
 8001c82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c84:	2202      	movs	r2, #2
 8001c86:	4013      	ands	r3, r2
 8001c88:	d108      	bne.n	8001c9c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e074      	b.n	8001d78 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c8e:	4b3e      	ldr	r3, [pc, #248]	; (8001d88 <HAL_RCC_ClockConfig+0x1f8>)
 8001c90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c92:	2202      	movs	r2, #2
 8001c94:	4013      	ands	r3, r2
 8001c96:	d101      	bne.n	8001c9c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e06d      	b.n	8001d78 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c9c:	4b3a      	ldr	r3, [pc, #232]	; (8001d88 <HAL_RCC_ClockConfig+0x1f8>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	2207      	movs	r2, #7
 8001ca2:	4393      	bics	r3, r2
 8001ca4:	0019      	movs	r1, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685a      	ldr	r2, [r3, #4]
 8001caa:	4b37      	ldr	r3, [pc, #220]	; (8001d88 <HAL_RCC_ClockConfig+0x1f8>)
 8001cac:	430a      	orrs	r2, r1
 8001cae:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cb0:	f7ff f8d8 	bl	8000e64 <HAL_GetTick>
 8001cb4:	0003      	movs	r3, r0
 8001cb6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cb8:	e009      	b.n	8001cce <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cba:	f7ff f8d3 	bl	8000e64 <HAL_GetTick>
 8001cbe:	0002      	movs	r2, r0
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	4a2f      	ldr	r2, [pc, #188]	; (8001d84 <HAL_RCC_ClockConfig+0x1f4>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e054      	b.n	8001d78 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cce:	4b2e      	ldr	r3, [pc, #184]	; (8001d88 <HAL_RCC_ClockConfig+0x1f8>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	2238      	movs	r2, #56	; 0x38
 8001cd4:	401a      	ands	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d1ec      	bne.n	8001cba <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ce0:	4b27      	ldr	r3, [pc, #156]	; (8001d80 <HAL_RCC_ClockConfig+0x1f0>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2207      	movs	r2, #7
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	683a      	ldr	r2, [r7, #0]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d21e      	bcs.n	8001d2c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cee:	4b24      	ldr	r3, [pc, #144]	; (8001d80 <HAL_RCC_ClockConfig+0x1f0>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2207      	movs	r2, #7
 8001cf4:	4393      	bics	r3, r2
 8001cf6:	0019      	movs	r1, r3
 8001cf8:	4b21      	ldr	r3, [pc, #132]	; (8001d80 <HAL_RCC_ClockConfig+0x1f0>)
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d00:	f7ff f8b0 	bl	8000e64 <HAL_GetTick>
 8001d04:	0003      	movs	r3, r0
 8001d06:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d08:	e009      	b.n	8001d1e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d0a:	f7ff f8ab 	bl	8000e64 <HAL_GetTick>
 8001d0e:	0002      	movs	r2, r0
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	4a1b      	ldr	r2, [pc, #108]	; (8001d84 <HAL_RCC_ClockConfig+0x1f4>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e02c      	b.n	8001d78 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d1e:	4b18      	ldr	r3, [pc, #96]	; (8001d80 <HAL_RCC_ClockConfig+0x1f0>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2207      	movs	r2, #7
 8001d24:	4013      	ands	r3, r2
 8001d26:	683a      	ldr	r2, [r7, #0]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d1ee      	bne.n	8001d0a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2204      	movs	r2, #4
 8001d32:	4013      	ands	r3, r2
 8001d34:	d009      	beq.n	8001d4a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001d36:	4b14      	ldr	r3, [pc, #80]	; (8001d88 <HAL_RCC_ClockConfig+0x1f8>)
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	4a15      	ldr	r2, [pc, #84]	; (8001d90 <HAL_RCC_ClockConfig+0x200>)
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	0019      	movs	r1, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	68da      	ldr	r2, [r3, #12]
 8001d44:	4b10      	ldr	r3, [pc, #64]	; (8001d88 <HAL_RCC_ClockConfig+0x1f8>)
 8001d46:	430a      	orrs	r2, r1
 8001d48:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001d4a:	f000 f829 	bl	8001da0 <HAL_RCC_GetSysClockFreq>
 8001d4e:	0001      	movs	r1, r0
 8001d50:	4b0d      	ldr	r3, [pc, #52]	; (8001d88 <HAL_RCC_ClockConfig+0x1f8>)
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	0a1b      	lsrs	r3, r3, #8
 8001d56:	220f      	movs	r2, #15
 8001d58:	401a      	ands	r2, r3
 8001d5a:	4b0e      	ldr	r3, [pc, #56]	; (8001d94 <HAL_RCC_ClockConfig+0x204>)
 8001d5c:	0092      	lsls	r2, r2, #2
 8001d5e:	58d3      	ldr	r3, [r2, r3]
 8001d60:	221f      	movs	r2, #31
 8001d62:	4013      	ands	r3, r2
 8001d64:	000a      	movs	r2, r1
 8001d66:	40da      	lsrs	r2, r3
 8001d68:	4b0b      	ldr	r3, [pc, #44]	; (8001d98 <HAL_RCC_ClockConfig+0x208>)
 8001d6a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001d6c:	4b0b      	ldr	r3, [pc, #44]	; (8001d9c <HAL_RCC_ClockConfig+0x20c>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	0018      	movs	r0, r3
 8001d72:	f7ff f81b 	bl	8000dac <HAL_InitTick>
 8001d76:	0003      	movs	r3, r0
}
 8001d78:	0018      	movs	r0, r3
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	b004      	add	sp, #16
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40022000 	.word	0x40022000
 8001d84:	00001388 	.word	0x00001388
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	fffff0ff 	.word	0xfffff0ff
 8001d90:	ffff8fff 	.word	0xffff8fff
 8001d94:	08002f00 	.word	0x08002f00
 8001d98:	20000004 	.word	0x20000004
 8001d9c:	20000008 	.word	0x20000008

08001da0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001da6:	4b3c      	ldr	r3, [pc, #240]	; (8001e98 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	2238      	movs	r2, #56	; 0x38
 8001dac:	4013      	ands	r3, r2
 8001dae:	d10f      	bne.n	8001dd0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001db0:	4b39      	ldr	r3, [pc, #228]	; (8001e98 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	0adb      	lsrs	r3, r3, #11
 8001db6:	2207      	movs	r2, #7
 8001db8:	4013      	ands	r3, r2
 8001dba:	2201      	movs	r2, #1
 8001dbc:	409a      	lsls	r2, r3
 8001dbe:	0013      	movs	r3, r2
 8001dc0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001dc2:	6839      	ldr	r1, [r7, #0]
 8001dc4:	4835      	ldr	r0, [pc, #212]	; (8001e9c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001dc6:	f7fe f977 	bl	80000b8 <__udivsi3>
 8001dca:	0003      	movs	r3, r0
 8001dcc:	613b      	str	r3, [r7, #16]
 8001dce:	e05d      	b.n	8001e8c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dd0:	4b31      	ldr	r3, [pc, #196]	; (8001e98 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	2238      	movs	r2, #56	; 0x38
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	2b08      	cmp	r3, #8
 8001dda:	d102      	bne.n	8001de2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ddc:	4b30      	ldr	r3, [pc, #192]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0x100>)
 8001dde:	613b      	str	r3, [r7, #16]
 8001de0:	e054      	b.n	8001e8c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001de2:	4b2d      	ldr	r3, [pc, #180]	; (8001e98 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	2238      	movs	r2, #56	; 0x38
 8001de8:	4013      	ands	r3, r2
 8001dea:	2b10      	cmp	r3, #16
 8001dec:	d138      	bne.n	8001e60 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001dee:	4b2a      	ldr	r3, [pc, #168]	; (8001e98 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	2203      	movs	r2, #3
 8001df4:	4013      	ands	r3, r2
 8001df6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001df8:	4b27      	ldr	r3, [pc, #156]	; (8001e98 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	091b      	lsrs	r3, r3, #4
 8001dfe:	2207      	movs	r2, #7
 8001e00:	4013      	ands	r3, r2
 8001e02:	3301      	adds	r3, #1
 8001e04:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2b03      	cmp	r3, #3
 8001e0a:	d10d      	bne.n	8001e28 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e0c:	68b9      	ldr	r1, [r7, #8]
 8001e0e:	4824      	ldr	r0, [pc, #144]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0x100>)
 8001e10:	f7fe f952 	bl	80000b8 <__udivsi3>
 8001e14:	0003      	movs	r3, r0
 8001e16:	0019      	movs	r1, r3
 8001e18:	4b1f      	ldr	r3, [pc, #124]	; (8001e98 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	0a1b      	lsrs	r3, r3, #8
 8001e1e:	227f      	movs	r2, #127	; 0x7f
 8001e20:	4013      	ands	r3, r2
 8001e22:	434b      	muls	r3, r1
 8001e24:	617b      	str	r3, [r7, #20]
        break;
 8001e26:	e00d      	b.n	8001e44 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001e28:	68b9      	ldr	r1, [r7, #8]
 8001e2a:	481c      	ldr	r0, [pc, #112]	; (8001e9c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001e2c:	f7fe f944 	bl	80000b8 <__udivsi3>
 8001e30:	0003      	movs	r3, r0
 8001e32:	0019      	movs	r1, r3
 8001e34:	4b18      	ldr	r3, [pc, #96]	; (8001e98 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	0a1b      	lsrs	r3, r3, #8
 8001e3a:	227f      	movs	r2, #127	; 0x7f
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	434b      	muls	r3, r1
 8001e40:	617b      	str	r3, [r7, #20]
        break;
 8001e42:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001e44:	4b14      	ldr	r3, [pc, #80]	; (8001e98 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	0f5b      	lsrs	r3, r3, #29
 8001e4a:	2207      	movs	r2, #7
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	3301      	adds	r3, #1
 8001e50:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001e52:	6879      	ldr	r1, [r7, #4]
 8001e54:	6978      	ldr	r0, [r7, #20]
 8001e56:	f7fe f92f 	bl	80000b8 <__udivsi3>
 8001e5a:	0003      	movs	r3, r0
 8001e5c:	613b      	str	r3, [r7, #16]
 8001e5e:	e015      	b.n	8001e8c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001e60:	4b0d      	ldr	r3, [pc, #52]	; (8001e98 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	2238      	movs	r2, #56	; 0x38
 8001e66:	4013      	ands	r3, r2
 8001e68:	2b20      	cmp	r3, #32
 8001e6a:	d103      	bne.n	8001e74 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001e6c:	2380      	movs	r3, #128	; 0x80
 8001e6e:	021b      	lsls	r3, r3, #8
 8001e70:	613b      	str	r3, [r7, #16]
 8001e72:	e00b      	b.n	8001e8c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001e74:	4b08      	ldr	r3, [pc, #32]	; (8001e98 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	2238      	movs	r2, #56	; 0x38
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	2b18      	cmp	r3, #24
 8001e7e:	d103      	bne.n	8001e88 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001e80:	23fa      	movs	r3, #250	; 0xfa
 8001e82:	01db      	lsls	r3, r3, #7
 8001e84:	613b      	str	r3, [r7, #16]
 8001e86:	e001      	b.n	8001e8c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001e8c:	693b      	ldr	r3, [r7, #16]
}
 8001e8e:	0018      	movs	r0, r3
 8001e90:	46bd      	mov	sp, r7
 8001e92:	b006      	add	sp, #24
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	46c0      	nop			; (mov r8, r8)
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	00f42400 	.word	0x00f42400
 8001ea0:	007a1200 	.word	0x007a1200

08001ea4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d101      	bne.n	8001eb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e04a      	b.n	8001f4c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	223d      	movs	r2, #61	; 0x3d
 8001eba:	5c9b      	ldrb	r3, [r3, r2]
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d107      	bne.n	8001ed2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	223c      	movs	r2, #60	; 0x3c
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	0018      	movs	r0, r3
 8001ece:	f7fe fd3f 	bl	8000950 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	223d      	movs	r2, #61	; 0x3d
 8001ed6:	2102      	movs	r1, #2
 8001ed8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	3304      	adds	r3, #4
 8001ee2:	0019      	movs	r1, r3
 8001ee4:	0010      	movs	r0, r2
 8001ee6:	f000 fa6b 	bl	80023c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2248      	movs	r2, #72	; 0x48
 8001eee:	2101      	movs	r1, #1
 8001ef0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	223e      	movs	r2, #62	; 0x3e
 8001ef6:	2101      	movs	r1, #1
 8001ef8:	5499      	strb	r1, [r3, r2]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	223f      	movs	r2, #63	; 0x3f
 8001efe:	2101      	movs	r1, #1
 8001f00:	5499      	strb	r1, [r3, r2]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2240      	movs	r2, #64	; 0x40
 8001f06:	2101      	movs	r1, #1
 8001f08:	5499      	strb	r1, [r3, r2]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2241      	movs	r2, #65	; 0x41
 8001f0e:	2101      	movs	r1, #1
 8001f10:	5499      	strb	r1, [r3, r2]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2242      	movs	r2, #66	; 0x42
 8001f16:	2101      	movs	r1, #1
 8001f18:	5499      	strb	r1, [r3, r2]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2243      	movs	r2, #67	; 0x43
 8001f1e:	2101      	movs	r1, #1
 8001f20:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2244      	movs	r2, #68	; 0x44
 8001f26:	2101      	movs	r1, #1
 8001f28:	5499      	strb	r1, [r3, r2]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2245      	movs	r2, #69	; 0x45
 8001f2e:	2101      	movs	r1, #1
 8001f30:	5499      	strb	r1, [r3, r2]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2246      	movs	r2, #70	; 0x46
 8001f36:	2101      	movs	r1, #1
 8001f38:	5499      	strb	r1, [r3, r2]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2247      	movs	r2, #71	; 0x47
 8001f3e:	2101      	movs	r1, #1
 8001f40:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	223d      	movs	r2, #61	; 0x3d
 8001f46:	2101      	movs	r1, #1
 8001f48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	0018      	movs	r0, r3
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	b002      	add	sp, #8
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d101      	bne.n	8001f66 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e04a      	b.n	8001ffc <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	223d      	movs	r2, #61	; 0x3d
 8001f6a:	5c9b      	ldrb	r3, [r3, r2]
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d107      	bne.n	8001f82 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	223c      	movs	r2, #60	; 0x3c
 8001f76:	2100      	movs	r1, #0
 8001f78:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	0018      	movs	r0, r3
 8001f7e:	f000 f841 	bl	8002004 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	223d      	movs	r2, #61	; 0x3d
 8001f86:	2102      	movs	r1, #2
 8001f88:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	3304      	adds	r3, #4
 8001f92:	0019      	movs	r1, r3
 8001f94:	0010      	movs	r0, r2
 8001f96:	f000 fa13 	bl	80023c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2248      	movs	r2, #72	; 0x48
 8001f9e:	2101      	movs	r1, #1
 8001fa0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	223e      	movs	r2, #62	; 0x3e
 8001fa6:	2101      	movs	r1, #1
 8001fa8:	5499      	strb	r1, [r3, r2]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	223f      	movs	r2, #63	; 0x3f
 8001fae:	2101      	movs	r1, #1
 8001fb0:	5499      	strb	r1, [r3, r2]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2240      	movs	r2, #64	; 0x40
 8001fb6:	2101      	movs	r1, #1
 8001fb8:	5499      	strb	r1, [r3, r2]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2241      	movs	r2, #65	; 0x41
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	5499      	strb	r1, [r3, r2]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2242      	movs	r2, #66	; 0x42
 8001fc6:	2101      	movs	r1, #1
 8001fc8:	5499      	strb	r1, [r3, r2]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2243      	movs	r2, #67	; 0x43
 8001fce:	2101      	movs	r1, #1
 8001fd0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2244      	movs	r2, #68	; 0x44
 8001fd6:	2101      	movs	r1, #1
 8001fd8:	5499      	strb	r1, [r3, r2]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2245      	movs	r2, #69	; 0x45
 8001fde:	2101      	movs	r1, #1
 8001fe0:	5499      	strb	r1, [r3, r2]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2246      	movs	r2, #70	; 0x46
 8001fe6:	2101      	movs	r1, #1
 8001fe8:	5499      	strb	r1, [r3, r2]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2247      	movs	r2, #71	; 0x47
 8001fee:	2101      	movs	r1, #1
 8001ff0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	223d      	movs	r2, #61	; 0x3d
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	0018      	movs	r0, r3
 8001ffe:	46bd      	mov	sp, r7
 8002000:	b002      	add	sp, #8
 8002002:	bd80      	pop	{r7, pc}

08002004 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800200c:	46c0      	nop			; (mov r8, r8)
 800200e:	46bd      	mov	sp, r7
 8002010:	b002      	add	sp, #8
 8002012:	bd80      	pop	{r7, pc}

08002014 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002020:	2317      	movs	r3, #23
 8002022:	18fb      	adds	r3, r7, r3
 8002024:	2200      	movs	r2, #0
 8002026:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	223c      	movs	r2, #60	; 0x3c
 800202c:	5c9b      	ldrb	r3, [r3, r2]
 800202e:	2b01      	cmp	r3, #1
 8002030:	d101      	bne.n	8002036 <HAL_TIM_PWM_ConfigChannel+0x22>
 8002032:	2302      	movs	r3, #2
 8002034:	e0e5      	b.n	8002202 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	223c      	movs	r2, #60	; 0x3c
 800203a:	2101      	movs	r1, #1
 800203c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2b14      	cmp	r3, #20
 8002042:	d900      	bls.n	8002046 <HAL_TIM_PWM_ConfigChannel+0x32>
 8002044:	e0d1      	b.n	80021ea <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	009a      	lsls	r2, r3, #2
 800204a:	4b70      	ldr	r3, [pc, #448]	; (800220c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800204c:	18d3      	adds	r3, r2, r3
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	68ba      	ldr	r2, [r7, #8]
 8002058:	0011      	movs	r1, r2
 800205a:	0018      	movs	r0, r3
 800205c:	f000 fa1c 	bl	8002498 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	699a      	ldr	r2, [r3, #24]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2108      	movs	r1, #8
 800206c:	430a      	orrs	r2, r1
 800206e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	699a      	ldr	r2, [r3, #24]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2104      	movs	r1, #4
 800207c:	438a      	bics	r2, r1
 800207e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	6999      	ldr	r1, [r3, #24]
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	691a      	ldr	r2, [r3, #16]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	430a      	orrs	r2, r1
 8002090:	619a      	str	r2, [r3, #24]
      break;
 8002092:	e0af      	b.n	80021f4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	68ba      	ldr	r2, [r7, #8]
 800209a:	0011      	movs	r1, r2
 800209c:	0018      	movs	r0, r3
 800209e:	f000 fa7b 	bl	8002598 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	699a      	ldr	r2, [r3, #24]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2180      	movs	r1, #128	; 0x80
 80020ae:	0109      	lsls	r1, r1, #4
 80020b0:	430a      	orrs	r2, r1
 80020b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	699a      	ldr	r2, [r3, #24]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4954      	ldr	r1, [pc, #336]	; (8002210 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80020c0:	400a      	ands	r2, r1
 80020c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	6999      	ldr	r1, [r3, #24]
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	021a      	lsls	r2, r3, #8
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	430a      	orrs	r2, r1
 80020d6:	619a      	str	r2, [r3, #24]
      break;
 80020d8:	e08c      	b.n	80021f4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68ba      	ldr	r2, [r7, #8]
 80020e0:	0011      	movs	r1, r2
 80020e2:	0018      	movs	r0, r3
 80020e4:	f000 fad6 	bl	8002694 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	69da      	ldr	r2, [r3, #28]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2108      	movs	r1, #8
 80020f4:	430a      	orrs	r2, r1
 80020f6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	69da      	ldr	r2, [r3, #28]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2104      	movs	r1, #4
 8002104:	438a      	bics	r2, r1
 8002106:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	69d9      	ldr	r1, [r3, #28]
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	691a      	ldr	r2, [r3, #16]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	430a      	orrs	r2, r1
 8002118:	61da      	str	r2, [r3, #28]
      break;
 800211a:	e06b      	b.n	80021f4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	68ba      	ldr	r2, [r7, #8]
 8002122:	0011      	movs	r1, r2
 8002124:	0018      	movs	r0, r3
 8002126:	f000 fb37 	bl	8002798 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	69da      	ldr	r2, [r3, #28]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2180      	movs	r1, #128	; 0x80
 8002136:	0109      	lsls	r1, r1, #4
 8002138:	430a      	orrs	r2, r1
 800213a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	69da      	ldr	r2, [r3, #28]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4932      	ldr	r1, [pc, #200]	; (8002210 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002148:	400a      	ands	r2, r1
 800214a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	69d9      	ldr	r1, [r3, #28]
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	021a      	lsls	r2, r3, #8
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	430a      	orrs	r2, r1
 800215e:	61da      	str	r2, [r3, #28]
      break;
 8002160:	e048      	b.n	80021f4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	68ba      	ldr	r2, [r7, #8]
 8002168:	0011      	movs	r1, r2
 800216a:	0018      	movs	r0, r3
 800216c:	f000 fb78 	bl	8002860 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2108      	movs	r1, #8
 800217c:	430a      	orrs	r2, r1
 800217e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2104      	movs	r1, #4
 800218c:	438a      	bics	r2, r1
 800218e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	691a      	ldr	r2, [r3, #16]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	430a      	orrs	r2, r1
 80021a0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80021a2:	e027      	b.n	80021f4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	68ba      	ldr	r2, [r7, #8]
 80021aa:	0011      	movs	r1, r2
 80021ac:	0018      	movs	r0, r3
 80021ae:	f000 fbb1 	bl	8002914 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2180      	movs	r1, #128	; 0x80
 80021be:	0109      	lsls	r1, r1, #4
 80021c0:	430a      	orrs	r2, r1
 80021c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4910      	ldr	r1, [pc, #64]	; (8002210 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80021d0:	400a      	ands	r2, r1
 80021d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	021a      	lsls	r2, r3, #8
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	430a      	orrs	r2, r1
 80021e6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80021e8:	e004      	b.n	80021f4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80021ea:	2317      	movs	r3, #23
 80021ec:	18fb      	adds	r3, r7, r3
 80021ee:	2201      	movs	r2, #1
 80021f0:	701a      	strb	r2, [r3, #0]
      break;
 80021f2:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	223c      	movs	r2, #60	; 0x3c
 80021f8:	2100      	movs	r1, #0
 80021fa:	5499      	strb	r1, [r3, r2]

  return status;
 80021fc:	2317      	movs	r3, #23
 80021fe:	18fb      	adds	r3, r7, r3
 8002200:	781b      	ldrb	r3, [r3, #0]
}
 8002202:	0018      	movs	r0, r3
 8002204:	46bd      	mov	sp, r7
 8002206:	b006      	add	sp, #24
 8002208:	bd80      	pop	{r7, pc}
 800220a:	46c0      	nop			; (mov r8, r8)
 800220c:	08002f40 	.word	0x08002f40
 8002210:	fffffbff 	.word	0xfffffbff

08002214 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800221e:	230f      	movs	r3, #15
 8002220:	18fb      	adds	r3, r7, r3
 8002222:	2200      	movs	r2, #0
 8002224:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	223c      	movs	r2, #60	; 0x3c
 800222a:	5c9b      	ldrb	r3, [r3, r2]
 800222c:	2b01      	cmp	r3, #1
 800222e:	d101      	bne.n	8002234 <HAL_TIM_ConfigClockSource+0x20>
 8002230:	2302      	movs	r3, #2
 8002232:	e0bc      	b.n	80023ae <HAL_TIM_ConfigClockSource+0x19a>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	223c      	movs	r2, #60	; 0x3c
 8002238:	2101      	movs	r1, #1
 800223a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	223d      	movs	r2, #61	; 0x3d
 8002240:	2102      	movs	r1, #2
 8002242:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	4a5a      	ldr	r2, [pc, #360]	; (80023b8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002250:	4013      	ands	r3, r2
 8002252:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	4a59      	ldr	r2, [pc, #356]	; (80023bc <HAL_TIM_ConfigClockSource+0x1a8>)
 8002258:	4013      	ands	r3, r2
 800225a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	68ba      	ldr	r2, [r7, #8]
 8002262:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2280      	movs	r2, #128	; 0x80
 800226a:	0192      	lsls	r2, r2, #6
 800226c:	4293      	cmp	r3, r2
 800226e:	d040      	beq.n	80022f2 <HAL_TIM_ConfigClockSource+0xde>
 8002270:	2280      	movs	r2, #128	; 0x80
 8002272:	0192      	lsls	r2, r2, #6
 8002274:	4293      	cmp	r3, r2
 8002276:	d900      	bls.n	800227a <HAL_TIM_ConfigClockSource+0x66>
 8002278:	e088      	b.n	800238c <HAL_TIM_ConfigClockSource+0x178>
 800227a:	2280      	movs	r2, #128	; 0x80
 800227c:	0152      	lsls	r2, r2, #5
 800227e:	4293      	cmp	r3, r2
 8002280:	d100      	bne.n	8002284 <HAL_TIM_ConfigClockSource+0x70>
 8002282:	e088      	b.n	8002396 <HAL_TIM_ConfigClockSource+0x182>
 8002284:	2280      	movs	r2, #128	; 0x80
 8002286:	0152      	lsls	r2, r2, #5
 8002288:	4293      	cmp	r3, r2
 800228a:	d900      	bls.n	800228e <HAL_TIM_ConfigClockSource+0x7a>
 800228c:	e07e      	b.n	800238c <HAL_TIM_ConfigClockSource+0x178>
 800228e:	2b70      	cmp	r3, #112	; 0x70
 8002290:	d018      	beq.n	80022c4 <HAL_TIM_ConfigClockSource+0xb0>
 8002292:	d900      	bls.n	8002296 <HAL_TIM_ConfigClockSource+0x82>
 8002294:	e07a      	b.n	800238c <HAL_TIM_ConfigClockSource+0x178>
 8002296:	2b60      	cmp	r3, #96	; 0x60
 8002298:	d04f      	beq.n	800233a <HAL_TIM_ConfigClockSource+0x126>
 800229a:	d900      	bls.n	800229e <HAL_TIM_ConfigClockSource+0x8a>
 800229c:	e076      	b.n	800238c <HAL_TIM_ConfigClockSource+0x178>
 800229e:	2b50      	cmp	r3, #80	; 0x50
 80022a0:	d03b      	beq.n	800231a <HAL_TIM_ConfigClockSource+0x106>
 80022a2:	d900      	bls.n	80022a6 <HAL_TIM_ConfigClockSource+0x92>
 80022a4:	e072      	b.n	800238c <HAL_TIM_ConfigClockSource+0x178>
 80022a6:	2b40      	cmp	r3, #64	; 0x40
 80022a8:	d057      	beq.n	800235a <HAL_TIM_ConfigClockSource+0x146>
 80022aa:	d900      	bls.n	80022ae <HAL_TIM_ConfigClockSource+0x9a>
 80022ac:	e06e      	b.n	800238c <HAL_TIM_ConfigClockSource+0x178>
 80022ae:	2b30      	cmp	r3, #48	; 0x30
 80022b0:	d063      	beq.n	800237a <HAL_TIM_ConfigClockSource+0x166>
 80022b2:	d86b      	bhi.n	800238c <HAL_TIM_ConfigClockSource+0x178>
 80022b4:	2b20      	cmp	r3, #32
 80022b6:	d060      	beq.n	800237a <HAL_TIM_ConfigClockSource+0x166>
 80022b8:	d868      	bhi.n	800238c <HAL_TIM_ConfigClockSource+0x178>
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d05d      	beq.n	800237a <HAL_TIM_ConfigClockSource+0x166>
 80022be:	2b10      	cmp	r3, #16
 80022c0:	d05b      	beq.n	800237a <HAL_TIM_ConfigClockSource+0x166>
 80022c2:	e063      	b.n	800238c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80022d4:	f000 fbf8 	bl	8002ac8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	2277      	movs	r2, #119	; 0x77
 80022e4:	4313      	orrs	r3, r2
 80022e6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68ba      	ldr	r2, [r7, #8]
 80022ee:	609a      	str	r2, [r3, #8]
      break;
 80022f0:	e052      	b.n	8002398 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002302:	f000 fbe1 	bl	8002ac8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	689a      	ldr	r2, [r3, #8]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2180      	movs	r1, #128	; 0x80
 8002312:	01c9      	lsls	r1, r1, #7
 8002314:	430a      	orrs	r2, r1
 8002316:	609a      	str	r2, [r3, #8]
      break;
 8002318:	e03e      	b.n	8002398 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002326:	001a      	movs	r2, r3
 8002328:	f000 fb52 	bl	80029d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2150      	movs	r1, #80	; 0x50
 8002332:	0018      	movs	r0, r3
 8002334:	f000 fbac 	bl	8002a90 <TIM_ITRx_SetConfig>
      break;
 8002338:	e02e      	b.n	8002398 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002346:	001a      	movs	r2, r3
 8002348:	f000 fb70 	bl	8002a2c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2160      	movs	r1, #96	; 0x60
 8002352:	0018      	movs	r0, r3
 8002354:	f000 fb9c 	bl	8002a90 <TIM_ITRx_SetConfig>
      break;
 8002358:	e01e      	b.n	8002398 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002366:	001a      	movs	r2, r3
 8002368:	f000 fb32 	bl	80029d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2140      	movs	r1, #64	; 0x40
 8002372:	0018      	movs	r0, r3
 8002374:	f000 fb8c 	bl	8002a90 <TIM_ITRx_SetConfig>
      break;
 8002378:	e00e      	b.n	8002398 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	0019      	movs	r1, r3
 8002384:	0010      	movs	r0, r2
 8002386:	f000 fb83 	bl	8002a90 <TIM_ITRx_SetConfig>
      break;
 800238a:	e005      	b.n	8002398 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800238c:	230f      	movs	r3, #15
 800238e:	18fb      	adds	r3, r7, r3
 8002390:	2201      	movs	r2, #1
 8002392:	701a      	strb	r2, [r3, #0]
      break;
 8002394:	e000      	b.n	8002398 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002396:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	223d      	movs	r2, #61	; 0x3d
 800239c:	2101      	movs	r1, #1
 800239e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	223c      	movs	r2, #60	; 0x3c
 80023a4:	2100      	movs	r1, #0
 80023a6:	5499      	strb	r1, [r3, r2]

  return status;
 80023a8:	230f      	movs	r3, #15
 80023aa:	18fb      	adds	r3, r7, r3
 80023ac:	781b      	ldrb	r3, [r3, #0]
}
 80023ae:	0018      	movs	r0, r3
 80023b0:	46bd      	mov	sp, r7
 80023b2:	b004      	add	sp, #16
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	46c0      	nop			; (mov r8, r8)
 80023b8:	ffceff88 	.word	0xffceff88
 80023bc:	ffff00ff 	.word	0xffff00ff

080023c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4a2b      	ldr	r2, [pc, #172]	; (8002480 <TIM_Base_SetConfig+0xc0>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d003      	beq.n	80023e0 <TIM_Base_SetConfig+0x20>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4a2a      	ldr	r2, [pc, #168]	; (8002484 <TIM_Base_SetConfig+0xc4>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d108      	bne.n	80023f2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2270      	movs	r2, #112	; 0x70
 80023e4:	4393      	bics	r3, r2
 80023e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a22      	ldr	r2, [pc, #136]	; (8002480 <TIM_Base_SetConfig+0xc0>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d00f      	beq.n	800241a <TIM_Base_SetConfig+0x5a>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a21      	ldr	r2, [pc, #132]	; (8002484 <TIM_Base_SetConfig+0xc4>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d00b      	beq.n	800241a <TIM_Base_SetConfig+0x5a>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a20      	ldr	r2, [pc, #128]	; (8002488 <TIM_Base_SetConfig+0xc8>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d007      	beq.n	800241a <TIM_Base_SetConfig+0x5a>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a1f      	ldr	r2, [pc, #124]	; (800248c <TIM_Base_SetConfig+0xcc>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d003      	beq.n	800241a <TIM_Base_SetConfig+0x5a>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a1e      	ldr	r2, [pc, #120]	; (8002490 <TIM_Base_SetConfig+0xd0>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d108      	bne.n	800242c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	4a1d      	ldr	r2, [pc, #116]	; (8002494 <TIM_Base_SetConfig+0xd4>)
 800241e:	4013      	ands	r3, r2
 8002420:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	68fa      	ldr	r2, [r7, #12]
 8002428:	4313      	orrs	r3, r2
 800242a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2280      	movs	r2, #128	; 0x80
 8002430:	4393      	bics	r3, r2
 8002432:	001a      	movs	r2, r3
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	695b      	ldr	r3, [r3, #20]
 8002438:	4313      	orrs	r3, r2
 800243a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	689a      	ldr	r2, [r3, #8]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a0a      	ldr	r2, [pc, #40]	; (8002480 <TIM_Base_SetConfig+0xc0>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d007      	beq.n	800246a <TIM_Base_SetConfig+0xaa>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a0b      	ldr	r2, [pc, #44]	; (800248c <TIM_Base_SetConfig+0xcc>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d003      	beq.n	800246a <TIM_Base_SetConfig+0xaa>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a0a      	ldr	r2, [pc, #40]	; (8002490 <TIM_Base_SetConfig+0xd0>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d103      	bne.n	8002472 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	691a      	ldr	r2, [r3, #16]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2201      	movs	r2, #1
 8002476:	615a      	str	r2, [r3, #20]
}
 8002478:	46c0      	nop			; (mov r8, r8)
 800247a:	46bd      	mov	sp, r7
 800247c:	b004      	add	sp, #16
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40012c00 	.word	0x40012c00
 8002484:	40000400 	.word	0x40000400
 8002488:	40002000 	.word	0x40002000
 800248c:	40014400 	.word	0x40014400
 8002490:	40014800 	.word	0x40014800
 8002494:	fffffcff 	.word	0xfffffcff

08002498 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a1b      	ldr	r3, [r3, #32]
 80024a6:	2201      	movs	r2, #1
 80024a8:	4393      	bics	r3, r2
 80024aa:	001a      	movs	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a1b      	ldr	r3, [r3, #32]
 80024b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	4a2e      	ldr	r2, [pc, #184]	; (8002580 <TIM_OC1_SetConfig+0xe8>)
 80024c6:	4013      	ands	r3, r2
 80024c8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2203      	movs	r2, #3
 80024ce:	4393      	bics	r3, r2
 80024d0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	4313      	orrs	r3, r2
 80024da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	2202      	movs	r2, #2
 80024e0:	4393      	bics	r3, r2
 80024e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	697a      	ldr	r2, [r7, #20]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a24      	ldr	r2, [pc, #144]	; (8002584 <TIM_OC1_SetConfig+0xec>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d007      	beq.n	8002506 <TIM_OC1_SetConfig+0x6e>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a23      	ldr	r2, [pc, #140]	; (8002588 <TIM_OC1_SetConfig+0xf0>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d003      	beq.n	8002506 <TIM_OC1_SetConfig+0x6e>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a22      	ldr	r2, [pc, #136]	; (800258c <TIM_OC1_SetConfig+0xf4>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d10c      	bne.n	8002520 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	2208      	movs	r2, #8
 800250a:	4393      	bics	r3, r2
 800250c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	697a      	ldr	r2, [r7, #20]
 8002514:	4313      	orrs	r3, r2
 8002516:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	2204      	movs	r2, #4
 800251c:	4393      	bics	r3, r2
 800251e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4a18      	ldr	r2, [pc, #96]	; (8002584 <TIM_OC1_SetConfig+0xec>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d007      	beq.n	8002538 <TIM_OC1_SetConfig+0xa0>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4a17      	ldr	r2, [pc, #92]	; (8002588 <TIM_OC1_SetConfig+0xf0>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d003      	beq.n	8002538 <TIM_OC1_SetConfig+0xa0>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4a16      	ldr	r2, [pc, #88]	; (800258c <TIM_OC1_SetConfig+0xf4>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d111      	bne.n	800255c <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	4a15      	ldr	r2, [pc, #84]	; (8002590 <TIM_OC1_SetConfig+0xf8>)
 800253c:	4013      	ands	r3, r2
 800253e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	4a14      	ldr	r2, [pc, #80]	; (8002594 <TIM_OC1_SetConfig+0xfc>)
 8002544:	4013      	ands	r3, r2
 8002546:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	695b      	ldr	r3, [r3, #20]
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	4313      	orrs	r3, r2
 8002550:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	4313      	orrs	r3, r2
 800255a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	68fa      	ldr	r2, [r7, #12]
 8002566:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685a      	ldr	r2, [r3, #4]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	697a      	ldr	r2, [r7, #20]
 8002574:	621a      	str	r2, [r3, #32]
}
 8002576:	46c0      	nop			; (mov r8, r8)
 8002578:	46bd      	mov	sp, r7
 800257a:	b006      	add	sp, #24
 800257c:	bd80      	pop	{r7, pc}
 800257e:	46c0      	nop			; (mov r8, r8)
 8002580:	fffeff8f 	.word	0xfffeff8f
 8002584:	40012c00 	.word	0x40012c00
 8002588:	40014400 	.word	0x40014400
 800258c:	40014800 	.word	0x40014800
 8002590:	fffffeff 	.word	0xfffffeff
 8002594:	fffffdff 	.word	0xfffffdff

08002598 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a1b      	ldr	r3, [r3, #32]
 80025a6:	2210      	movs	r2, #16
 80025a8:	4393      	bics	r3, r2
 80025aa:	001a      	movs	r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a1b      	ldr	r3, [r3, #32]
 80025b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	4a2c      	ldr	r2, [pc, #176]	; (8002678 <TIM_OC2_SetConfig+0xe0>)
 80025c6:	4013      	ands	r3, r2
 80025c8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	4a2b      	ldr	r2, [pc, #172]	; (800267c <TIM_OC2_SetConfig+0xe4>)
 80025ce:	4013      	ands	r3, r2
 80025d0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	021b      	lsls	r3, r3, #8
 80025d8:	68fa      	ldr	r2, [r7, #12]
 80025da:	4313      	orrs	r3, r2
 80025dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	2220      	movs	r2, #32
 80025e2:	4393      	bics	r3, r2
 80025e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	011b      	lsls	r3, r3, #4
 80025ec:	697a      	ldr	r2, [r7, #20]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a22      	ldr	r2, [pc, #136]	; (8002680 <TIM_OC2_SetConfig+0xe8>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d10d      	bne.n	8002616 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	2280      	movs	r2, #128	; 0x80
 80025fe:	4393      	bics	r3, r2
 8002600:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	011b      	lsls	r3, r3, #4
 8002608:	697a      	ldr	r2, [r7, #20]
 800260a:	4313      	orrs	r3, r2
 800260c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	2240      	movs	r2, #64	; 0x40
 8002612:	4393      	bics	r3, r2
 8002614:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a19      	ldr	r2, [pc, #100]	; (8002680 <TIM_OC2_SetConfig+0xe8>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d007      	beq.n	800262e <TIM_OC2_SetConfig+0x96>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a18      	ldr	r2, [pc, #96]	; (8002684 <TIM_OC2_SetConfig+0xec>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d003      	beq.n	800262e <TIM_OC2_SetConfig+0x96>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a17      	ldr	r2, [pc, #92]	; (8002688 <TIM_OC2_SetConfig+0xf0>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d113      	bne.n	8002656 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	4a16      	ldr	r2, [pc, #88]	; (800268c <TIM_OC2_SetConfig+0xf4>)
 8002632:	4013      	ands	r3, r2
 8002634:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	4a15      	ldr	r2, [pc, #84]	; (8002690 <TIM_OC2_SetConfig+0xf8>)
 800263a:	4013      	ands	r3, r2
 800263c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	693a      	ldr	r2, [r7, #16]
 8002646:	4313      	orrs	r3, r2
 8002648:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	699b      	ldr	r3, [r3, #24]
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	4313      	orrs	r3, r2
 8002654:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685a      	ldr	r2, [r3, #4]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	697a      	ldr	r2, [r7, #20]
 800266e:	621a      	str	r2, [r3, #32]
}
 8002670:	46c0      	nop			; (mov r8, r8)
 8002672:	46bd      	mov	sp, r7
 8002674:	b006      	add	sp, #24
 8002676:	bd80      	pop	{r7, pc}
 8002678:	feff8fff 	.word	0xfeff8fff
 800267c:	fffffcff 	.word	0xfffffcff
 8002680:	40012c00 	.word	0x40012c00
 8002684:	40014400 	.word	0x40014400
 8002688:	40014800 	.word	0x40014800
 800268c:	fffffbff 	.word	0xfffffbff
 8002690:	fffff7ff 	.word	0xfffff7ff

08002694 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b086      	sub	sp, #24
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a1b      	ldr	r3, [r3, #32]
 80026a2:	4a33      	ldr	r2, [pc, #204]	; (8002770 <TIM_OC3_SetConfig+0xdc>)
 80026a4:	401a      	ands	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a1b      	ldr	r3, [r3, #32]
 80026ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	69db      	ldr	r3, [r3, #28]
 80026ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	4a2d      	ldr	r2, [pc, #180]	; (8002774 <TIM_OC3_SetConfig+0xe0>)
 80026c0:	4013      	ands	r3, r2
 80026c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2203      	movs	r2, #3
 80026c8:	4393      	bics	r3, r2
 80026ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	4a27      	ldr	r2, [pc, #156]	; (8002778 <TIM_OC3_SetConfig+0xe4>)
 80026da:	4013      	ands	r3, r2
 80026dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	021b      	lsls	r3, r3, #8
 80026e4:	697a      	ldr	r2, [r7, #20]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a23      	ldr	r2, [pc, #140]	; (800277c <TIM_OC3_SetConfig+0xe8>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d10d      	bne.n	800270e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	4a22      	ldr	r2, [pc, #136]	; (8002780 <TIM_OC3_SetConfig+0xec>)
 80026f6:	4013      	ands	r3, r2
 80026f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	021b      	lsls	r3, r3, #8
 8002700:	697a      	ldr	r2, [r7, #20]
 8002702:	4313      	orrs	r3, r2
 8002704:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	4a1e      	ldr	r2, [pc, #120]	; (8002784 <TIM_OC3_SetConfig+0xf0>)
 800270a:	4013      	ands	r3, r2
 800270c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a1a      	ldr	r2, [pc, #104]	; (800277c <TIM_OC3_SetConfig+0xe8>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d007      	beq.n	8002726 <TIM_OC3_SetConfig+0x92>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a1b      	ldr	r2, [pc, #108]	; (8002788 <TIM_OC3_SetConfig+0xf4>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d003      	beq.n	8002726 <TIM_OC3_SetConfig+0x92>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a1a      	ldr	r2, [pc, #104]	; (800278c <TIM_OC3_SetConfig+0xf8>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d113      	bne.n	800274e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	4a19      	ldr	r2, [pc, #100]	; (8002790 <TIM_OC3_SetConfig+0xfc>)
 800272a:	4013      	ands	r3, r2
 800272c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	4a18      	ldr	r2, [pc, #96]	; (8002794 <TIM_OC3_SetConfig+0x100>)
 8002732:	4013      	ands	r3, r2
 8002734:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	011b      	lsls	r3, r3, #4
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	4313      	orrs	r3, r2
 8002740:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	011b      	lsls	r3, r3, #4
 8002748:	693a      	ldr	r2, [r7, #16]
 800274a:	4313      	orrs	r3, r2
 800274c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	693a      	ldr	r2, [r7, #16]
 8002752:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685a      	ldr	r2, [r3, #4]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	697a      	ldr	r2, [r7, #20]
 8002766:	621a      	str	r2, [r3, #32]
}
 8002768:	46c0      	nop			; (mov r8, r8)
 800276a:	46bd      	mov	sp, r7
 800276c:	b006      	add	sp, #24
 800276e:	bd80      	pop	{r7, pc}
 8002770:	fffffeff 	.word	0xfffffeff
 8002774:	fffeff8f 	.word	0xfffeff8f
 8002778:	fffffdff 	.word	0xfffffdff
 800277c:	40012c00 	.word	0x40012c00
 8002780:	fffff7ff 	.word	0xfffff7ff
 8002784:	fffffbff 	.word	0xfffffbff
 8002788:	40014400 	.word	0x40014400
 800278c:	40014800 	.word	0x40014800
 8002790:	ffffefff 	.word	0xffffefff
 8002794:	ffffdfff 	.word	0xffffdfff

08002798 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a1b      	ldr	r3, [r3, #32]
 80027a6:	4a26      	ldr	r2, [pc, #152]	; (8002840 <TIM_OC4_SetConfig+0xa8>)
 80027a8:	401a      	ands	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a1b      	ldr	r3, [r3, #32]
 80027b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	69db      	ldr	r3, [r3, #28]
 80027be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	4a20      	ldr	r2, [pc, #128]	; (8002844 <TIM_OC4_SetConfig+0xac>)
 80027c4:	4013      	ands	r3, r2
 80027c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	4a1f      	ldr	r2, [pc, #124]	; (8002848 <TIM_OC4_SetConfig+0xb0>)
 80027cc:	4013      	ands	r3, r2
 80027ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	021b      	lsls	r3, r3, #8
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	4313      	orrs	r3, r2
 80027da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	4a1b      	ldr	r2, [pc, #108]	; (800284c <TIM_OC4_SetConfig+0xb4>)
 80027e0:	4013      	ands	r3, r2
 80027e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	031b      	lsls	r3, r3, #12
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4a17      	ldr	r2, [pc, #92]	; (8002850 <TIM_OC4_SetConfig+0xb8>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d007      	beq.n	8002808 <TIM_OC4_SetConfig+0x70>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a16      	ldr	r2, [pc, #88]	; (8002854 <TIM_OC4_SetConfig+0xbc>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d003      	beq.n	8002808 <TIM_OC4_SetConfig+0x70>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4a15      	ldr	r2, [pc, #84]	; (8002858 <TIM_OC4_SetConfig+0xc0>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d109      	bne.n	800281c <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	4a14      	ldr	r2, [pc, #80]	; (800285c <TIM_OC4_SetConfig+0xc4>)
 800280c:	4013      	ands	r3, r2
 800280e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	695b      	ldr	r3, [r3, #20]
 8002814:	019b      	lsls	r3, r3, #6
 8002816:	697a      	ldr	r2, [r7, #20]
 8002818:	4313      	orrs	r3, r2
 800281a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685a      	ldr	r2, [r3, #4]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	621a      	str	r2, [r3, #32]
}
 8002836:	46c0      	nop			; (mov r8, r8)
 8002838:	46bd      	mov	sp, r7
 800283a:	b006      	add	sp, #24
 800283c:	bd80      	pop	{r7, pc}
 800283e:	46c0      	nop			; (mov r8, r8)
 8002840:	ffffefff 	.word	0xffffefff
 8002844:	feff8fff 	.word	0xfeff8fff
 8002848:	fffffcff 	.word	0xfffffcff
 800284c:	ffffdfff 	.word	0xffffdfff
 8002850:	40012c00 	.word	0x40012c00
 8002854:	40014400 	.word	0x40014400
 8002858:	40014800 	.word	0x40014800
 800285c:	ffffbfff 	.word	0xffffbfff

08002860 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a1b      	ldr	r3, [r3, #32]
 800286e:	4a23      	ldr	r2, [pc, #140]	; (80028fc <TIM_OC5_SetConfig+0x9c>)
 8002870:	401a      	ands	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	4a1d      	ldr	r2, [pc, #116]	; (8002900 <TIM_OC5_SetConfig+0xa0>)
 800288c:	4013      	ands	r3, r2
 800288e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	68fa      	ldr	r2, [r7, #12]
 8002896:	4313      	orrs	r3, r2
 8002898:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	4a19      	ldr	r2, [pc, #100]	; (8002904 <TIM_OC5_SetConfig+0xa4>)
 800289e:	4013      	ands	r3, r2
 80028a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	041b      	lsls	r3, r3, #16
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a15      	ldr	r2, [pc, #84]	; (8002908 <TIM_OC5_SetConfig+0xa8>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d007      	beq.n	80028c6 <TIM_OC5_SetConfig+0x66>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a14      	ldr	r2, [pc, #80]	; (800290c <TIM_OC5_SetConfig+0xac>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d003      	beq.n	80028c6 <TIM_OC5_SetConfig+0x66>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a13      	ldr	r2, [pc, #76]	; (8002910 <TIM_OC5_SetConfig+0xb0>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d109      	bne.n	80028da <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	4a0c      	ldr	r2, [pc, #48]	; (80028fc <TIM_OC5_SetConfig+0x9c>)
 80028ca:	4013      	ands	r3, r2
 80028cc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	021b      	lsls	r3, r3, #8
 80028d4:	697a      	ldr	r2, [r7, #20]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	697a      	ldr	r2, [r7, #20]
 80028de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685a      	ldr	r2, [r3, #4]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	693a      	ldr	r2, [r7, #16]
 80028f2:	621a      	str	r2, [r3, #32]
}
 80028f4:	46c0      	nop			; (mov r8, r8)
 80028f6:	46bd      	mov	sp, r7
 80028f8:	b006      	add	sp, #24
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	fffeffff 	.word	0xfffeffff
 8002900:	fffeff8f 	.word	0xfffeff8f
 8002904:	fffdffff 	.word	0xfffdffff
 8002908:	40012c00 	.word	0x40012c00
 800290c:	40014400 	.word	0x40014400
 8002910:	40014800 	.word	0x40014800

08002914 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a1b      	ldr	r3, [r3, #32]
 8002922:	4a24      	ldr	r2, [pc, #144]	; (80029b4 <TIM_OC6_SetConfig+0xa0>)
 8002924:	401a      	ands	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a1b      	ldr	r3, [r3, #32]
 800292e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800293a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	4a1e      	ldr	r2, [pc, #120]	; (80029b8 <TIM_OC6_SetConfig+0xa4>)
 8002940:	4013      	ands	r3, r2
 8002942:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	021b      	lsls	r3, r3, #8
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	4313      	orrs	r3, r2
 800294e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	4a1a      	ldr	r2, [pc, #104]	; (80029bc <TIM_OC6_SetConfig+0xa8>)
 8002954:	4013      	ands	r3, r2
 8002956:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	051b      	lsls	r3, r3, #20
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	4313      	orrs	r3, r2
 8002962:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4a16      	ldr	r2, [pc, #88]	; (80029c0 <TIM_OC6_SetConfig+0xac>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d007      	beq.n	800297c <TIM_OC6_SetConfig+0x68>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a15      	ldr	r2, [pc, #84]	; (80029c4 <TIM_OC6_SetConfig+0xb0>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d003      	beq.n	800297c <TIM_OC6_SetConfig+0x68>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4a14      	ldr	r2, [pc, #80]	; (80029c8 <TIM_OC6_SetConfig+0xb4>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d109      	bne.n	8002990 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	4a13      	ldr	r2, [pc, #76]	; (80029cc <TIM_OC6_SetConfig+0xb8>)
 8002980:	4013      	ands	r3, r2
 8002982:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	695b      	ldr	r3, [r3, #20]
 8002988:	029b      	lsls	r3, r3, #10
 800298a:	697a      	ldr	r2, [r7, #20]
 800298c:	4313      	orrs	r3, r2
 800298e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	697a      	ldr	r2, [r7, #20]
 8002994:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	68fa      	ldr	r2, [r7, #12]
 800299a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685a      	ldr	r2, [r3, #4]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	621a      	str	r2, [r3, #32]
}
 80029aa:	46c0      	nop			; (mov r8, r8)
 80029ac:	46bd      	mov	sp, r7
 80029ae:	b006      	add	sp, #24
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	46c0      	nop			; (mov r8, r8)
 80029b4:	ffefffff 	.word	0xffefffff
 80029b8:	feff8fff 	.word	0xfeff8fff
 80029bc:	ffdfffff 	.word	0xffdfffff
 80029c0:	40012c00 	.word	0x40012c00
 80029c4:	40014400 	.word	0x40014400
 80029c8:	40014800 	.word	0x40014800
 80029cc:	fffbffff 	.word	0xfffbffff

080029d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b086      	sub	sp, #24
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6a1b      	ldr	r3, [r3, #32]
 80029e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6a1b      	ldr	r3, [r3, #32]
 80029e6:	2201      	movs	r2, #1
 80029e8:	4393      	bics	r3, r2
 80029ea:	001a      	movs	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	699b      	ldr	r3, [r3, #24]
 80029f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	22f0      	movs	r2, #240	; 0xf0
 80029fa:	4393      	bics	r3, r2
 80029fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	011b      	lsls	r3, r3, #4
 8002a02:	693a      	ldr	r2, [r7, #16]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	220a      	movs	r2, #10
 8002a0c:	4393      	bics	r3, r2
 8002a0e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a10:	697a      	ldr	r2, [r7, #20]
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	697a      	ldr	r2, [r7, #20]
 8002a22:	621a      	str	r2, [r3, #32]
}
 8002a24:	46c0      	nop			; (mov r8, r8)
 8002a26:	46bd      	mov	sp, r7
 8002a28:	b006      	add	sp, #24
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b086      	sub	sp, #24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6a1b      	ldr	r3, [r3, #32]
 8002a3c:	2210      	movs	r2, #16
 8002a3e:	4393      	bics	r3, r2
 8002a40:	001a      	movs	r2, r3
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6a1b      	ldr	r3, [r3, #32]
 8002a50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	4a0d      	ldr	r2, [pc, #52]	; (8002a8c <TIM_TI2_ConfigInputStage+0x60>)
 8002a56:	4013      	ands	r3, r2
 8002a58:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	031b      	lsls	r3, r3, #12
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	22a0      	movs	r2, #160	; 0xa0
 8002a68:	4393      	bics	r3, r2
 8002a6a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	011b      	lsls	r3, r3, #4
 8002a70:	693a      	ldr	r2, [r7, #16]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	697a      	ldr	r2, [r7, #20]
 8002a7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	621a      	str	r2, [r3, #32]
}
 8002a82:	46c0      	nop			; (mov r8, r8)
 8002a84:	46bd      	mov	sp, r7
 8002a86:	b006      	add	sp, #24
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	46c0      	nop			; (mov r8, r8)
 8002a8c:	ffff0fff 	.word	0xffff0fff

08002a90 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	4a08      	ldr	r2, [pc, #32]	; (8002ac4 <TIM_ITRx_SetConfig+0x34>)
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002aa8:	683a      	ldr	r2, [r7, #0]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	2207      	movs	r2, #7
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	609a      	str	r2, [r3, #8]
}
 8002aba:	46c0      	nop			; (mov r8, r8)
 8002abc:	46bd      	mov	sp, r7
 8002abe:	b004      	add	sp, #16
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	46c0      	nop			; (mov r8, r8)
 8002ac4:	ffcfff8f 	.word	0xffcfff8f

08002ac8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b086      	sub	sp, #24
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	607a      	str	r2, [r7, #4]
 8002ad4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	4a09      	ldr	r2, [pc, #36]	; (8002b04 <TIM_ETR_SetConfig+0x3c>)
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	021a      	lsls	r2, r3, #8
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	431a      	orrs	r2, r3
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	697a      	ldr	r2, [r7, #20]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	697a      	ldr	r2, [r7, #20]
 8002afa:	609a      	str	r2, [r3, #8]
}
 8002afc:	46c0      	nop			; (mov r8, r8)
 8002afe:	46bd      	mov	sp, r7
 8002b00:	b006      	add	sp, #24
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	ffff00ff 	.word	0xffff00ff

08002b08 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d108      	bne.n	8002b2a <HAL_TIMEx_PWMN_Start+0x22>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2244      	movs	r2, #68	; 0x44
 8002b1c:	5c9b      	ldrb	r3, [r3, r2]
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	3b01      	subs	r3, #1
 8002b22:	1e5a      	subs	r2, r3, #1
 8002b24:	4193      	sbcs	r3, r2
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	e01f      	b.n	8002b6a <HAL_TIMEx_PWMN_Start+0x62>
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	2b04      	cmp	r3, #4
 8002b2e:	d108      	bne.n	8002b42 <HAL_TIMEx_PWMN_Start+0x3a>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2245      	movs	r2, #69	; 0x45
 8002b34:	5c9b      	ldrb	r3, [r3, r2]
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	3b01      	subs	r3, #1
 8002b3a:	1e5a      	subs	r2, r3, #1
 8002b3c:	4193      	sbcs	r3, r2
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	e013      	b.n	8002b6a <HAL_TIMEx_PWMN_Start+0x62>
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	2b08      	cmp	r3, #8
 8002b46:	d108      	bne.n	8002b5a <HAL_TIMEx_PWMN_Start+0x52>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2246      	movs	r2, #70	; 0x46
 8002b4c:	5c9b      	ldrb	r3, [r3, r2]
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	3b01      	subs	r3, #1
 8002b52:	1e5a      	subs	r2, r3, #1
 8002b54:	4193      	sbcs	r3, r2
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	e007      	b.n	8002b6a <HAL_TIMEx_PWMN_Start+0x62>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2247      	movs	r2, #71	; 0x47
 8002b5e:	5c9b      	ldrb	r3, [r3, r2]
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	3b01      	subs	r3, #1
 8002b64:	1e5a      	subs	r2, r3, #1
 8002b66:	4193      	sbcs	r3, r2
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <HAL_TIMEx_PWMN_Start+0x6a>
  {
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e057      	b.n	8002c22 <HAL_TIMEx_PWMN_Start+0x11a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d104      	bne.n	8002b82 <HAL_TIMEx_PWMN_Start+0x7a>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2244      	movs	r2, #68	; 0x44
 8002b7c:	2102      	movs	r1, #2
 8002b7e:	5499      	strb	r1, [r3, r2]
 8002b80:	e013      	b.n	8002baa <HAL_TIMEx_PWMN_Start+0xa2>
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	2b04      	cmp	r3, #4
 8002b86:	d104      	bne.n	8002b92 <HAL_TIMEx_PWMN_Start+0x8a>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2245      	movs	r2, #69	; 0x45
 8002b8c:	2102      	movs	r1, #2
 8002b8e:	5499      	strb	r1, [r3, r2]
 8002b90:	e00b      	b.n	8002baa <HAL_TIMEx_PWMN_Start+0xa2>
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	2b08      	cmp	r3, #8
 8002b96:	d104      	bne.n	8002ba2 <HAL_TIMEx_PWMN_Start+0x9a>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2246      	movs	r2, #70	; 0x46
 8002b9c:	2102      	movs	r1, #2
 8002b9e:	5499      	strb	r1, [r3, r2]
 8002ba0:	e003      	b.n	8002baa <HAL_TIMEx_PWMN_Start+0xa2>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2247      	movs	r2, #71	; 0x47
 8002ba6:	2102      	movs	r1, #2
 8002ba8:	5499      	strb	r1, [r3, r2]

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	6839      	ldr	r1, [r7, #0]
 8002bb0:	2204      	movs	r2, #4
 8002bb2:	0018      	movs	r0, r3
 8002bb4:	f000 f948 	bl	8002e48 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2180      	movs	r1, #128	; 0x80
 8002bc4:	0209      	lsls	r1, r1, #8
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a17      	ldr	r2, [pc, #92]	; (8002c2c <HAL_TIMEx_PWMN_Start+0x124>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d004      	beq.n	8002bde <HAL_TIMEx_PWMN_Start+0xd6>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a15      	ldr	r2, [pc, #84]	; (8002c30 <HAL_TIMEx_PWMN_Start+0x128>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d116      	bne.n	8002c0c <HAL_TIMEx_PWMN_Start+0x104>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	4a13      	ldr	r2, [pc, #76]	; (8002c34 <HAL_TIMEx_PWMN_Start+0x12c>)
 8002be6:	4013      	ands	r3, r2
 8002be8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2b06      	cmp	r3, #6
 8002bee:	d016      	beq.n	8002c1e <HAL_TIMEx_PWMN_Start+0x116>
 8002bf0:	68fa      	ldr	r2, [r7, #12]
 8002bf2:	2380      	movs	r3, #128	; 0x80
 8002bf4:	025b      	lsls	r3, r3, #9
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d011      	beq.n	8002c1e <HAL_TIMEx_PWMN_Start+0x116>
    {
      __HAL_TIM_ENABLE(htim);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2101      	movs	r1, #1
 8002c06:	430a      	orrs	r2, r1
 8002c08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c0a:	e008      	b.n	8002c1e <HAL_TIMEx_PWMN_Start+0x116>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2101      	movs	r1, #1
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	601a      	str	r2, [r3, #0]
 8002c1c:	e000      	b.n	8002c20 <HAL_TIMEx_PWMN_Start+0x118>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c1e:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	0018      	movs	r0, r3
 8002c24:	46bd      	mov	sp, r7
 8002c26:	b004      	add	sp, #16
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	46c0      	nop			; (mov r8, r8)
 8002c2c:	40012c00 	.word	0x40012c00
 8002c30:	40000400 	.word	0x40000400
 8002c34:	00010007 	.word	0x00010007

08002c38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	223c      	movs	r2, #60	; 0x3c
 8002c46:	5c9b      	ldrb	r3, [r3, r2]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d101      	bne.n	8002c50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	e04a      	b.n	8002ce6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	223c      	movs	r2, #60	; 0x3c
 8002c54:	2101      	movs	r1, #1
 8002c56:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	223d      	movs	r2, #61	; 0x3d
 8002c5c:	2102      	movs	r1, #2
 8002c5e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a1e      	ldr	r2, [pc, #120]	; (8002cf0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d108      	bne.n	8002c8c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	4a1d      	ldr	r2, [pc, #116]	; (8002cf4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8002c7e:	4013      	ands	r3, r2
 8002c80:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2270      	movs	r2, #112	; 0x70
 8002c90:	4393      	bics	r3, r2
 8002c92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68fa      	ldr	r2, [r7, #12]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a11      	ldr	r2, [pc, #68]	; (8002cf0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d004      	beq.n	8002cba <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a10      	ldr	r2, [pc, #64]	; (8002cf8 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d10c      	bne.n	8002cd4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	2280      	movs	r2, #128	; 0x80
 8002cbe:	4393      	bics	r3, r2
 8002cc0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	68ba      	ldr	r2, [r7, #8]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68ba      	ldr	r2, [r7, #8]
 8002cd2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	223d      	movs	r2, #61	; 0x3d
 8002cd8:	2101      	movs	r1, #1
 8002cda:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	223c      	movs	r2, #60	; 0x3c
 8002ce0:	2100      	movs	r1, #0
 8002ce2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	0018      	movs	r0, r3
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	b004      	add	sp, #16
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	46c0      	nop			; (mov r8, r8)
 8002cf0:	40012c00 	.word	0x40012c00
 8002cf4:	ff0fffff 	.word	0xff0fffff
 8002cf8:	40000400 	.word	0x40000400

08002cfc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002d06:	2300      	movs	r3, #0
 8002d08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	223c      	movs	r2, #60	; 0x3c
 8002d0e:	5c9b      	ldrb	r3, [r3, r2]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d101      	bne.n	8002d18 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002d14:	2302      	movs	r3, #2
 8002d16:	e079      	b.n	8002e0c <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	223c      	movs	r2, #60	; 0x3c
 8002d1c:	2101      	movs	r1, #1
 8002d1e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	22ff      	movs	r2, #255	; 0xff
 8002d24:	4393      	bics	r3, r2
 8002d26:	001a      	movs	r2, r3
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	4a38      	ldr	r2, [pc, #224]	; (8002e14 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8002d34:	401a      	ands	r2, r3
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	4a35      	ldr	r2, [pc, #212]	; (8002e18 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8002d42:	401a      	ands	r2, r3
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	4a33      	ldr	r2, [pc, #204]	; (8002e1c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8002d50:	401a      	ands	r2, r3
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	4a30      	ldr	r2, [pc, #192]	; (8002e20 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8002d5e:	401a      	ands	r2, r3
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	4a2e      	ldr	r2, [pc, #184]	; (8002e24 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8002d6c:	401a      	ands	r2, r3
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	4a2b      	ldr	r2, [pc, #172]	; (8002e28 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8002d7a:	401a      	ands	r2, r3
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d80:	4313      	orrs	r3, r2
 8002d82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	4a29      	ldr	r2, [pc, #164]	; (8002e2c <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8002d88:	401a      	ands	r2, r3
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	041b      	lsls	r3, r3, #16
 8002d90:	4313      	orrs	r3, r2
 8002d92:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a25      	ldr	r2, [pc, #148]	; (8002e30 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d106      	bne.n	8002dac <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	4a24      	ldr	r2, [pc, #144]	; (8002e34 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8002da2:	401a      	ands	r2, r3
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	69db      	ldr	r3, [r3, #28]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a1f      	ldr	r2, [pc, #124]	; (8002e30 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d121      	bne.n	8002dfa <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	4a1f      	ldr	r2, [pc, #124]	; (8002e38 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8002dba:	401a      	ands	r2, r3
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc0:	051b      	lsls	r3, r3, #20
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	4a1c      	ldr	r2, [pc, #112]	; (8002e3c <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8002dca:	401a      	ands	r2, r3
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	6a1b      	ldr	r3, [r3, #32]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	4a1a      	ldr	r2, [pc, #104]	; (8002e40 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8002dd8:	401a      	ands	r2, r3
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dde:	4313      	orrs	r3, r2
 8002de0:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a12      	ldr	r2, [pc, #72]	; (8002e30 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d106      	bne.n	8002dfa <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	4a15      	ldr	r2, [pc, #84]	; (8002e44 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8002df0:	401a      	ands	r2, r3
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df6:	4313      	orrs	r3, r2
 8002df8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	223c      	movs	r2, #60	; 0x3c
 8002e06:	2100      	movs	r1, #0
 8002e08:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	0018      	movs	r0, r3
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	b004      	add	sp, #16
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	fffffcff 	.word	0xfffffcff
 8002e18:	fffffbff 	.word	0xfffffbff
 8002e1c:	fffff7ff 	.word	0xfffff7ff
 8002e20:	ffffefff 	.word	0xffffefff
 8002e24:	ffffdfff 	.word	0xffffdfff
 8002e28:	ffffbfff 	.word	0xffffbfff
 8002e2c:	fff0ffff 	.word	0xfff0ffff
 8002e30:	40012c00 	.word	0x40012c00
 8002e34:	efffffff 	.word	0xefffffff
 8002e38:	ff0fffff 	.word	0xff0fffff
 8002e3c:	feffffff 	.word	0xfeffffff
 8002e40:	fdffffff 	.word	0xfdffffff
 8002e44:	dfffffff 	.word	0xdfffffff

08002e48 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b086      	sub	sp, #24
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	221f      	movs	r2, #31
 8002e58:	4013      	ands	r3, r2
 8002e5a:	2204      	movs	r2, #4
 8002e5c:	409a      	lsls	r2, r3
 8002e5e:	0013      	movs	r3, r2
 8002e60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	697a      	ldr	r2, [r7, #20]
 8002e68:	43d2      	mvns	r2, r2
 8002e6a:	401a      	ands	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6a1a      	ldr	r2, [r3, #32]
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	211f      	movs	r1, #31
 8002e78:	400b      	ands	r3, r1
 8002e7a:	6879      	ldr	r1, [r7, #4]
 8002e7c:	4099      	lsls	r1, r3
 8002e7e:	000b      	movs	r3, r1
 8002e80:	431a      	orrs	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	621a      	str	r2, [r3, #32]
}
 8002e86:	46c0      	nop			; (mov r8, r8)
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	b006      	add	sp, #24
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <memset>:
 8002e8e:	0003      	movs	r3, r0
 8002e90:	1882      	adds	r2, r0, r2
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d100      	bne.n	8002e98 <memset+0xa>
 8002e96:	4770      	bx	lr
 8002e98:	7019      	strb	r1, [r3, #0]
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	e7f9      	b.n	8002e92 <memset+0x4>
	...

08002ea0 <__libc_init_array>:
 8002ea0:	b570      	push	{r4, r5, r6, lr}
 8002ea2:	2600      	movs	r6, #0
 8002ea4:	4c0c      	ldr	r4, [pc, #48]	; (8002ed8 <__libc_init_array+0x38>)
 8002ea6:	4d0d      	ldr	r5, [pc, #52]	; (8002edc <__libc_init_array+0x3c>)
 8002ea8:	1b64      	subs	r4, r4, r5
 8002eaa:	10a4      	asrs	r4, r4, #2
 8002eac:	42a6      	cmp	r6, r4
 8002eae:	d109      	bne.n	8002ec4 <__libc_init_array+0x24>
 8002eb0:	2600      	movs	r6, #0
 8002eb2:	f000 f819 	bl	8002ee8 <_init>
 8002eb6:	4c0a      	ldr	r4, [pc, #40]	; (8002ee0 <__libc_init_array+0x40>)
 8002eb8:	4d0a      	ldr	r5, [pc, #40]	; (8002ee4 <__libc_init_array+0x44>)
 8002eba:	1b64      	subs	r4, r4, r5
 8002ebc:	10a4      	asrs	r4, r4, #2
 8002ebe:	42a6      	cmp	r6, r4
 8002ec0:	d105      	bne.n	8002ece <__libc_init_array+0x2e>
 8002ec2:	bd70      	pop	{r4, r5, r6, pc}
 8002ec4:	00b3      	lsls	r3, r6, #2
 8002ec6:	58eb      	ldr	r3, [r5, r3]
 8002ec8:	4798      	blx	r3
 8002eca:	3601      	adds	r6, #1
 8002ecc:	e7ee      	b.n	8002eac <__libc_init_array+0xc>
 8002ece:	00b3      	lsls	r3, r6, #2
 8002ed0:	58eb      	ldr	r3, [r5, r3]
 8002ed2:	4798      	blx	r3
 8002ed4:	3601      	adds	r6, #1
 8002ed6:	e7f2      	b.n	8002ebe <__libc_init_array+0x1e>
 8002ed8:	08002f94 	.word	0x08002f94
 8002edc:	08002f94 	.word	0x08002f94
 8002ee0:	08002f98 	.word	0x08002f98
 8002ee4:	08002f94 	.word	0x08002f94

08002ee8 <_init>:
 8002ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eea:	46c0      	nop			; (mov r8, r8)
 8002eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eee:	bc08      	pop	{r3}
 8002ef0:	469e      	mov	lr, r3
 8002ef2:	4770      	bx	lr

08002ef4 <_fini>:
 8002ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ef6:	46c0      	nop			; (mov r8, r8)
 8002ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002efa:	bc08      	pop	{r3}
 8002efc:	469e      	mov	lr, r3
 8002efe:	4770      	bx	lr
